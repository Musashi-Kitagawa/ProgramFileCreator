unit ScreenDbUnit;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs,  System.StrUtils, System.Contnrs, System.Types,
  Xml.XMLDoc, Xml.XMLIntf, Vcl.StdCtrls, Vcl.ExtCtrls;


const
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    FScreenDbTable : array [0..11] of string = (
        'UiFrame',                          // 0
        'UiScreenSelectButton',             // 1
        'UiList',                           // 2
        'UiListColumn',                     // 3
        'UiContent',                        // 4
        'UiListCellButton',                 // 5
        'UiDstButton',                      // 6
        'UiSrcButton',                      // 7
        'UiPanelKeyButton',                 // 8
        'UiPanelDstButton',                 // 9
        'UiPanelSrcButton',                 // 10
        'UiColorSrcKeyButton'               // 11
    );

    UiFrame_No                  = 0;
    UiScreenSelectButton_No     = 1;
    UiList_No                   = 2;
    UiListColumn_No             = 3;
    UiContent_No                = 4;
    UiListCellButton_No         = 5;
    UiDstButton_No              = 6;
    UiSrcButton_No              = 7;
    UiPanelKeyButton_No         = 8;
    UiPanelDstButton_No         = 9;
    UiPanelSrcButton_No         = 10;
    UiColorSrcKeyButton_No      = 11;

type
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TScreenDb = class( TObject )

        FDataType   : integer;

        F_Id    : integer;
        E_Id    : Boolean;

        FPanel  : TPanel;

  	public
        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

        procedure   SetPosition( pa : TWinControl; rct : TRect; cap : string );

    end;

    TUiButton = TScreenDb;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TUiFrame = class( TScreenDb )

        F_Note              : string;
        E_Note              : Boolean;

        F_ParentFrameId     : string;
        E_ParentFrameId     : Boolean;

        F_TitleText         : string;
        E_TitleText         : Boolean;

        F_TitleBarHeightPix : string;
        E_TitleBarHeightPix : Boolean;

        F_TitleBarVisible   : string;
        E_TitleBarVisible   : Boolean;

        F_BackColor         : string;
        E_BackColor         : Boolean;

        F_Type              : string;
        E_Type              : Boolean;

        F_Name              : string;
        E_Name              : Boolean;

        F_Attribute         : string;
        E_Attribute         : Boolean;

        F_ColCount          : string;
        E_ColCount          : Boolean;

        F_RowCount          : string;
        E_RowCount          : Boolean;

        F_IsModal           : string;
        E_IsModal           : Boolean;

        F_Order             : string;
        E_Order             : Boolean;

        F_InnerOrder        : string;
        E_InnerOrder        : Boolean;

        F_Left              : string;
        E_Left              : Boolean;

        F_Width             : string;
        E_Width             : Boolean;

        F_Top               : string;
        E_Top               : Boolean;

        F_Height            : string;
        E_Height            : Boolean;

        F_BorderWidth       : string;
        E_BorderWidth       : Boolean;

        F_BorderColor       : string;
        E_BorderColor       : Boolean;


  	public
        // コンストラクタ
        constructor Create; override;

        // デストラクタ
        destructor 	Destroy; override;
    end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TUiScreenSelectButton = class( TScreenDb )
        F_FrameId       : string;
        E_FrameId       : Boolean;

        F_Text          : string;
        E_Text          : Boolean;

        F_Key           : string;
        E_Key           : Boolean;

        F_FrameName     : string;
        E_FrameName     : Boolean;

        F_BeforeRelayKey        : string;
        E_BeforeRelayKey        : Boolean;

        F_Attributes    : string;
        E_Attributes    : Boolean;

        F_Order         : string;
        E_Order         : Boolean;

        F_Left          : string;
        E_Left          : Boolean;

        F_Width         : string;
        E_Width         : Boolean;

        F_Top           : string;
        E_Top           : Boolean;

        F_Height        : string;
        E_Height        : Boolean;

        F_BorderWidth   : string;
        E_BorderWidth   : Boolean;

        F_IncludeHeadbar        : string;
        E_IncludeHeadbar        : Boolean;

        F_HeadbarColor          : string;
        E_HeadbarColor          : Boolean;

        F_HeadbarHeight         : string;
        E_HeadbarHeight         : Boolean;

        F_HeadbarText           : string;
        E_HeadbarText           : Boolean;

        F_HeadbarFontSize       : string;
        E_HeadbarFontSize       : Boolean;

        F_IsPermissionHandled   : string;
        E_IsPermissionHandled   : Boolean;

        F_IsSelectionCancel     : string;
        E_IsSelectionCancel     : Boolean;

        F_FontSize              : string;
        E_FontSize              : Boolean;

        F_IsDisabled            : string;
        E_IsDisabled            : Boolean;

        F_IsListItem            : string;
        E_IsListItem            : Boolean;

  	public
        // コンストラクタ
        constructor Create; override;

        // デストラクタ
        destructor 	Destroy; override;
    end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TUiList = class( TScreenDb )

        F_FrameId   : string;
        E_FrameId   : Boolean;

        F_ListType     : string;
        E_ListType     : Boolean;

        F_Attributes     : string;
        E_Attributes     : Boolean;

        F_DefaultSortColumnName     : string;
        E_DefaultSortColumnName     : Boolean;

        F_AllowMultiSort     : string;
        E_AllowMultiSort     : Boolean;

        F_FilterButtonWidth     : string;
        E_FilterButtonWidth     : Boolean;

        F_RowHeight     : string;
        E_RowHeight     : Boolean;

        F_RowHeaderColumnName     : string;
        E_RowHeaderColumnName     : Boolean;

        F_RowHeaderClickAction     : string;
        E_RowHeaderClickAction     : Boolean;

        F_ColumnFontSize     : string;
        E_ColumnFontSize     : Boolean;

        F_CellFontSize     : string;
        E_CellFontSize     : Boolean;

        F_Order     : string;
        E_Order     : Boolean;

        F_Left      : string;
        E_Left      : Boolean;

        F_Width     : string;
        E_Width     : Boolean;

        F_Top       : string;
        E_Top       : Boolean;

        F_Height    : string;
        E_Height    : Boolean;

  	public
        // コンストラクタ
        constructor Create; override;

        // デストラクタ
        destructor 	Destroy; override;
    end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TUiListColumn = class( TScreenDb )

        F_ListId    : string;
        E_ListId    : Boolean;

        F_Order     : string;
        E_Order     : Boolean;

        F_SortOrder     : string;
        E_SortOrder     : Boolean;

        F_Width     : string;
        E_Width     : Boolean;

        F_IsVisible : string;
        E_IsVisible : Boolean;

        F_IsReadOnly        : string;
        E_IsReadOnly        : Boolean;

        F_Text          : string;
        E_Text          : Boolean;

        F_ColName       : string;
        E_ColName       : Boolean;

        F_ColAlias  : string;
        E_ColAlias       : Boolean;

        F_ColHeaderClickAction  : string;
        E_ColHeaderClickAction  : Boolean;

        F_CellType      : string;
        E_CellType      : Boolean;

        F_EnumTypeName      : string;
        E_EnumTypeName      : Boolean;

        F_Format      : string;
        E_Format      : Boolean;

        F_Attribute      : string;
        E_Attribute      : Boolean;

        F_AllowSort     : string;
        E_AllowSort     : Boolean;

        F_AllowFilter   : string;
        E_AllowFilter   : Boolean;

        F_AllowWideChar     : string;
        E_AllowWideChar     : Boolean;

        F_MaxLangth         : string;
        E_MaxLangth         : Boolean;

        F_MaxLengthIsBytes  : string;
        E_MaxLengthIsBytes  : Boolean;

        F_DisplayMaxLineCount    : string;
        E_DisplayMaxLineCount    : Boolean;

        F_ColumnFontSize    : string;
        E_ColumnFontSize    : Boolean;

        F_CellFontSize      : string;
        E_CellFontSize      : Boolean;

        F_CellTextHAlign    : string;
        E_CellTextHAlign    : Boolean;

        F_CanReEntry        : string;
        E_CanReEntry        : Boolean;

        F_IsCellButtonCol   : string;
        E_IsCellButtonCol   : Boolean;

        F_IsRowSelectSync   : string;
        E_IsRowSelectSync   : Boolean;

        F_BoolTrueText      : string;
        E_BoolTrueText      : Boolean;

        F_BoolFalseText     : string;
        E_BoolFalseText     : Boolean;

        F_IsFontSizeAdjustable     : string;
        E_IsFontSizeAdjustable     : Boolean;

        F_FooterText        : string;
        E_FooterText        : Boolean;

  	public
        // コンストラクタ
        constructor Create; override;

        // デストラクタ
        destructor 	Destroy; override;
    end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TUiContent = class( TScreenDb )

        F_FrameId   : string;
        E_FrameId   : Boolean;

        F_Text  : string;
        E_Text  : Boolean;

        F_UiType    : string;
        E_UiType    : Boolean;

        F_Name    : string;
        E_Name    : Boolean;

        F_Attributes    : string;
        E_Attributes    : Boolean;


        F_Order : string;
        E_Order : Boolean;

        F_Left  : string;
        E_Left  : Boolean;

        F_Width : string;
        E_Width : Boolean;

        F_Top   : string;
        E_Top   : Boolean;

        F_Height    : string;
        E_Height    : Boolean;

        F_BorderWidth    : string;
        E_BorderWidth    : Boolean;

  	public
        // コンストラクタ
        constructor Create; override;

        // デストラクタ
        destructor 	Destroy; override;
    end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TUiListCellButton = class( TScreenDb )

        F_ColumnId  : string;
        E_ColumnId  : Boolean;

        F_Order : string;
        E_Order : Boolean;

        F_Width : string;
        E_Width : Boolean;

        F_Text  : string;
        E_Text  : Boolean;

        F_ClickAction   : string;
        E_ClickAction   : Boolean;

        F_IsDefaultRowVisible   : string;
        E_IsDefaultRowVisible   : Boolean;

        F_IsStandartRowVisible  : string;
        E_IsStandartRowVisible  : Boolean;

        F_FontSize          : string;
        E_FontSize          : Boolean;

        F_IsRowSelectSync   : string;
        E_IsRowSelectSync   : Boolean;

        F_HeadbarHeight     : string;
        E_HeadbarHeight     : Boolean;


  	public
        // コンストラクタ
        constructor Create; override;

        // デストラクタ
        destructor 	Destroy; override;
    end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TUiDstButton = class( TScreenDb )

        F_FrameId   : string;
        E_FrameId   : Boolean;

        F_DstPortNo : string;
        E_DstPortNo : Boolean;

        F_IsListItem : string;
        E_IsListItem : Boolean;

        F_DstHeightPx : string;
        E_DstHeightPx : Boolean;

        F_FontSize : string;
        E_FontSize : Boolean;

        F_Order : string;
        E_Order : Boolean;

        F_Left  : string;
        E_Left  : Boolean;

        F_Width : string;
        E_Width : Boolean;

        F_Top   : string;
        E_Top   : Boolean;

        F_Height            : string;
        E_Height            : Boolean;

        F_BorderWidth       : string;
        E_BorderWidth       : Boolean;

        F_IsDisabled        : string;
        E_IsDisabled        : Boolean;

        F_SystemModeBitMask : string;
        E_SystemModeBitMask : Boolean;

        F_Attrubute         : string;
        E_Attrubute         : Boolean;

        F_IsHeadBarHidden   : string;
        E_IsHeadBarHidden   : Boolean;

        F_DstFontSize       : string;
        E_DstFontSize       : Boolean;


  	public
        // コンストラクタ
        constructor Create; override;

        // デストラクタ
        destructor 	Destroy; override;
    end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TUiSrcButton = class( TScreenDb )

        F_FrameId   : string;
        E_FrameId   : Boolean;

        F_SrcPortNo : string;
        E_SrcPortNo : Boolean;

        F_Order : string;
        E_Order : Boolean;

        F_Left  : string;
        E_Left  : Boolean;

        F_Width : string;
        E_Width : Boolean;

        F_Top   : string;
        E_Top   : Boolean;

        F_Height    : string;
        E_Height    : Boolean;

        F_SystemModeBitMask    : string;
        E_SystemModeBitMask    : Boolean;

        F_FontSize      : string;
        E_FontSize      : Boolean;

        F_Attribute     : string;
        E_Attribute     : Boolean;

  	public
        // コンストラクタ
        constructor Create; override;

        // デストラクタ
        destructor 	Destroy; override;
    end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TUiPanelKeyButton = class( TScreenDb )

        F_FrameId   : string;
        E_FrameId   : Boolean;

        F_ButtonNo  : string;
        E_ButtonNo  : Boolean;

        F_DstAssignDisable  : string;
        E_DstAssignDisable  : Boolean;

        F_SrcAssignDisable  : string;
        E_SrcAssignDisable  : Boolean;

        F_CopyButtonNo  : string;
        E_CopyButtonNo  : Boolean;

        F_SyncPageRange : string;
        E_SyncPageRange : Boolean;

        F_DispMode : string;
        E_DispMode : Boolean;

        F_Order : string;
        E_Order : Boolean;

        F_Left  : string;
        E_Left  : Boolean;

        F_Width : string;
        E_Width : Boolean;

        F_Top   : string;
        E_Top   : Boolean;

        F_Height    : string;
        E_Height    : Boolean;

  	public
        // コンストラクタ
        constructor Create; override;

        // デストラクタ
        destructor 	Destroy; override;
    end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TUiPanelDstButton = class( TScreenDb )

        F_FrameId   : string;
        E_FrameId   : Boolean;

        F_DstPortNo : string;
        E_DstPortNo : Boolean;

        F_Order : string;
        E_Order : Boolean;

        F_Left  : string;
        E_Left  : Boolean;

        F_Width : string;
        E_Width : Boolean;

        F_Top   : string;
        E_Top   : Boolean;

        F_Height    : string;
        E_Height    : Boolean;

        F_BorderWidth    : string;
        E_BorderWidth    : Boolean;

        F_SystemModeBitMask    : string;
        E_SystemModeBitMask    : Boolean;

  	public
        // コンストラクタ
        constructor Create; override;

        // デストラクタ
        destructor 	Destroy; override;
    end;


//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TUiPanelSrcButton = class( TScreenDb )

        F_FrameId   : string;
        E_FrameId   : Boolean;

        F_SrcPortNo : string;
        E_SrcPortNo : Boolean;

        F_Order : string;
        E_Order : Boolean;

        F_Left  : string;
        E_Left  : Boolean;

        F_Width : string;
        E_Width : Boolean;

        F_Top   : string;
        E_Top   : Boolean;

        F_Height    : string;
        E_Height    : Boolean;

        F_SystemModeBitMask    : string;
        E_SystemModeBitMask    : Boolean;

  	public
        // コンストラクタ
        constructor Create; override;

        // デストラクタ
        destructor 	Destroy; override;
    end;


//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TUiColorSrcKeyButton = class( TScreenDb )

        F_FrameId   : string;
        E_FrameId   : Boolean;

        F_SrcPortNo : string;
        E_SrcPortNo : Boolean;

        F_Order : string;
        E_Order : Boolean;

        F_Left  : string;
        E_Left  : Boolean;

        F_Width : string;
        E_Width : Boolean;

        F_Top   : string;
        E_Top   : Boolean;

        F_Height    : string;
        E_Height    : Boolean;

  	public
        // コンストラクタ
        constructor Create; override;

        // デストラクタ
        destructor 	Destroy; override;
    end;


//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TScreenList = class( TObjectList )
    private

	  	function    GetData( index : integer ) : TScreenDb;

        function    UiFrameLoad( cnl : IXMLNodeList ) : TUiFrame;
        procedure   UiFrameSave( XML_Doc : IXMLDocument; u : TUiFrame );
        function    UiScreenSelectButtonLoad( cnl : IXMLNodeList ) : TUiScreenSelectButton;
        procedure   UiScreenSelectButtonSave( XML_Doc : IXMLDocument; u : TUiScreenSelectButton );
        function    UiListLoad( cnl : IXMLNodeList ) : TUiList;
        procedure   UiListSave( XML_Doc : IXMLDocument; u : TUiList );
        function    UiListColumnLoad( cnl : IXMLNodeList ) : TUiListColumn;
        procedure   UiListColumnSave( XML_Doc : IXMLDocument; u : TUiListColumn );
        function    UiContentLoad( cnl : IXMLNodeList ) : TUiContent;
        procedure   UiContentSave( XML_Doc : IXMLDocument; u : TUiContent );
        function    UiListCellButtonLoad( cnl : IXMLNodeList ) : TUiListCellButton;
        procedure   UiListCellButtonSave( XML_Doc : IXMLDocument; u : TUiListCellButton );
        function    UiDstButtonLoad( cnl : IXMLNodeList ) : TUiDstButton;
        procedure   UiDstButtonSave( XML_Doc : IXMLDocument; u : TUiDstButton );
        function    UiSrcButtonLoad( cnl : IXMLNodeList ) : TUiSrcButton;
        procedure   UiSrcButtonSave( XML_Doc : IXMLDocument; u : TUiSrcButton );
        function    UiPanelKeyButtonLoad( cnl : IXMLNodeList ) : TUiPanelKeyButton;
        procedure   UiPanelKeyButtonSave( XML_Doc : IXMLDocument; u : TUiPanelKeyButton );
        function    UiPanelDstButtonLoad( cnl : IXMLNodeList ) : TUiPanelDstButton;
        procedure   UiPanelDstButtonSave( XML_Doc : IXMLDocument; u : TUiPanelDstButton );
        function    UiPanelSrcButtonLoad( cnl : IXMLNodeList ) : TUiPanelSrcButton;
        procedure   UiPanelSrcButtonSave( XML_Doc : IXMLDocument; u : TUiPanelSrcButton );
        function    UiColorSrcKeyButtonLoad( cnl : IXMLNodeList ) : TUiColorSrcKeyButton;
        procedure   UiColorSrcKeyButtonSave( XML_Doc : IXMLDocument; u : TUiColorSrcKeyButton );

  	public
        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

        function    ScreenDbLoad( fn : string ) : Boolean;
        procedure   ScreenDbSave( fn : string );

        function    GetChildFrame( id : integer ) : integer;

        function    Search( bType, bId : integer ) : TScreenDb;
        function    SearchByName( bType : integer; nm : string ) : TScreenDb;

        function    SearchList( id : string ) : TUiList;
        function    SearchButton( bType : integer; bId : string; lst : TScreenList ) : integer; overload;
        function    SearchButton( bType : integer; bId : string ) : TUiScreenSelectButton; overload;
        function    SearchParent( bType : integer; bId : string; lst : TScreenList ) : integer;
        function    SearchSource( bType : integer; bId : string; lst : TScreenList ) : integer;

		procedure   ClearAll;
        procedure   AllExtract( opt : integer=0 );
//        procedure   AllExtract2;
        procedure   AllExtract3;

 		property Data[index:integer] : TScreenDb	read GetData;
    end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TDisplayDb = class( TObject )

        FDataType   : integer;

  	public
        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

    end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TDisplayMessage = class( TDisplayDb )

        F_Id            : string;
        E_Id            : Boolean;

        F_MessageCode   : string;
        E_MessageCode   : Boolean;

        F_Message       : string;
        E_Message       : Boolean;

        F_Memo          : string;
        E_Memo          : Boolean;


  	public
        // コンストラクタ
        constructor     Create; override;

        // デストラクタ
        destructor 	    Destroy; override;
    end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TDisplayEnumType = class( TDisplayDb )

        F_Name      : string;
        E_Name      : Boolean;

        F_Note      : string;
        E_Note      : Boolean;

  	public
        // コンストラクタ
        constructor     Create; override;

        // デストラクタ
        destructor 	    Destroy; override;
    end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TDisplayEnumvalue = class( TDisplayDb )

        F_EnumName  : string;
        E_EnumName  : Boolean;

        F_Value     : string;
        E_Value     : Boolean;

        F_Order     : string;
        E_Order     : Boolean;

        F_Text      : string;
        E_Text      : Boolean;

        F_Arrtibute : string;
        E_Arrtibute : Boolean;

        F_Tag       : string;
        E_Tag       : Boolean;

        F_IsHidden  : string;
        E_IsHidden  : Boolean;

  	public
        // コンストラクタ
        constructor     Create; override;

        // デストラクタ
        destructor 	    Destroy; override;
    end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TDisplayDspSettings = class( TDisplayDb )

        F_ValueId   : string;
        E_ValueId   : Boolean;

        F_Value     : string;
        E_Value     : Boolean;

        F_Order     : string;
        E_Order     : Boolean;

        F_Note      : string;
        E_Note      : Boolean;

  	public
        // コンストラクタ
        constructor     Create; override;

        // デストラクタ
        destructor 	    Destroy; override;
    end;


//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TDisplayList = class( TObjectList )
    private

	  	function    GetData( index : integer ) : TDisplayDb;

  	public
        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

        function    Load( fn : string ) : Boolean;
        procedure   Save( fn : string );

        function    DisplayMessageLoad( cnl : IXMLNodeList ) : TDisplayMessage;
        procedure   DisplayMessageSave( XML_Doc : IXMLDocument; u : TDisplayMessage );
        function    DisplayEmptyTypeLoad( cnl : IXMLNodeList ) : TDisplayEnumType;
        procedure   DisplayEnumTypeSave( XML_Doc : IXMLDocument; u : TDisplayEnumType );
        function    DisplayDisplayEmptyValueLoad( cnl : IXMLNodeList ) : TDisplayEnumValue;
        procedure   DisplayEnumValueSave( XML_Doc : IXMLDocument; u : TDisplayEnumValue );
        function    DisplayDspSettingsLoad( cnl : IXMLNodeList ) : TDisplayDspSettings;
        procedure   DisplayDspSettingsSave( XML_Doc : IXMLDocument; u : TDisplayDspSettings );

		procedure   ClearAll;

 		property Data[index:integer] : TDisplayDb	read GetData;
    end;


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TProgramDbList = class( TObjectList )
    private

//	  	function    GetData( index : integer ) : TXPTSourceData;

  	public
        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

//        function    Search( port : integer ) : string;

		procedure   ClearAll;

//        property    Data[index:integer] : TXPTSourceData	read GetData;
    end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TXPTSourceData = class( TObject )
//    private

        F_SrcPortNo               : string;
        F_DefaultDescription      : string;
        F_DefaultDescription4k    : string;
        F_Description             : string;
        F_Description4k           : string;
        F_InputName               : string;
        F_ClipDuration            : string;
        F_NameHeader              : string;
        F_NameFooter              : string;
        F_BusLinkId               : string;
        F_DescriptionLinkId       : string;
        F_DescriptionLinkId4k     : string;
        F_InputNameLinkId         : string;
        F_JMode                   : string;
        F_JLength                 : string;
        F_JDelimiter              : string;
        F_IsNameSendTarget        : string;
        F_DispMode                : string;
        F_DispModeName            : string;
        F_JMode2                  : string;
        F_UseWideChar             : string;

        F_DefaultDescriptionQd    : string;
        F_DescriptionQd           : string;
        F_DefaultInputName        : string;
        F_IsInputNameNameHeaderLinked   : string;

  	public
        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

    end;

    TPgSourceData   = TXPTSourceData;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TXPTSourceList = class( TProgramDbList )
    private

	  	function    GetData( index : integer ) : TXPTSourceData;

  	public
        // コンストラクタ
        constructor Create; override;

        // デストラクタ
        destructor 	Destroy; override;

        function    Search( port : integer ) : string;

		procedure   ClearAll;

 		property    Data[index:integer] : TXPTSourceData	read GetData;
    end;

    TPgSourceList   = TXPTSourceList;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TPgPanelKey = class( TObject )
    private

        FDeviceId       : string;
        FPageNo         : integer;
        FKeyNo          : string;
        FKeyType        : string;
        FValue          : string;
        FIsInhibit      : string;

  	public
        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

        property    DeviceId : string   read FDeviceId  write FDeviceId;
        property    PageNo : integer    read FPageNo    write FPageNo;
        property    KeyNo : string      read FKeyNo     write FKeyNo;
        property    KeyType : string    read FKeyType   write FKeyType;
        property    Value : string      read FValue     write FValue;
        property    IsInhibit : string  read FIsInhibit write FIsInhibit;
    end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TPgPanelKeyList = class( TObjectList )

 	  	function    GetData( index : integer ) : TPgPanelKey;

  	public
        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

 		property    Data[index:integer] : TPgPanelKey	read GetData;
    end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TPgDeviceData = class( TObject )
    private

        FDeviceId       : string;
        FDeviceTypeName : string;
        FBkupDateTime   : string;

        FPage           : array [0..31] of TPgPanelKeyList;

        function    GetPage( index : integer ) : TPgPanelKeyList;

  	public
        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

        property    DeviceId  : string          read FDeviceId          write FDeviceId;
        property    DeviceTypeName  : string    read FDeviceTypeName    write FDeviceTypeName;
        property    BkupDateTime  : string      read FBkupDateTime      write FBkupDateTime;

        property    Page[index:integer] : TPgPanelKeyList   read GetPage;

    const
        MAX_PAGE    = 32;

    end;


//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TPgMvDstButton = class( TObject )
//    private

        F_Id          : string;
        F_FrameId     : string;
        F_PresetNo    : string;
        F_DstPortNo   : string;
        F_Order       : string;
        F_Left        : string;
        F_Width       : string;
        F_Top         : string;
        F_Height      : string;


//        function    GetPage( index : integer ) : TPgPanelKeyList;

  	public
        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

{
        property    DeviceId  : string          read FDeviceId          write FDeviceId;
        property    DeviceTypeName  : string    read FDeviceTypeName    write FDeviceTypeName;
        property    BkupDateTime  : string      read FBkupDateTime      write FBkupDateTime;

        property    Page[index:integer] : TPgPanelKeyList   read GetPage;

    const
        MAX_PAGE    = 32;
}

    end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TPgDeviceList = class( TProgramDbList )
    private

	  	function    GetData( index : integer ) : TPgDeviceData;

  	public
        // コンストラクタ
        constructor Create; override;

        // デストラクタ
        destructor 	Destroy; override;

        function    SearchDeviceID( id : string ) : TPgDeviceData;

//        function    Search( port : integer ) : string;
//		procedure   ClearAll;

 		property    Data[index:integer] : TPgDeviceData	read GetData;
    end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TPgDestinationData = class( TObject )
//    private

        F_DstPortNo               : string;
        F_DefaultDescription      : string;
        F_DefaultDescription4k    : string;
        F_Description             : string;
        F_Description4k           : string;
        F_InputName               : string;
        F_DescriptionLinkId       : string;
        F_InputNameLinkId         : string;
        F_JMode                   : string;
        F_JLength                 : string;
        F_JDelimiter              : string;
        F_IsNameSendTarget        : string;
        F_JMode2                  : string;
        F_UseWideChar             : string;

        F_DefaultDescriptionQd    : string;
        F_DescriptionQd           : string;
        F_DefaultInputName        : string;
        F_IsXptSendTarget         : string;

  	public
        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

    end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TPgDestinationList = class( TProgramDbList )
    private

	  	function    GetData( index : integer ) : TPgDestinationData;

  	public
        // コンストラクタ
        constructor Create; override;

        // デストラクタ
        destructor 	Destroy; override;

        function    Search( port : string ) : string;
//        function    SearchDeviceID( id : string ) : TPgDeviceData;
//		procedure   ClearAll;
//        function    Load( fn : string ) : Boolean;

 		property    Data[index:integer] : TPgDestinationData	read GetData;
    end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TPgCrossPoint = class( TObject )
//    private

        F_DstPortNo             : string;
        F_Level                 : string;
        F_SrcPortNo             : string;

  	public
        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;
    end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TPgCrossPointList = class( TProgramDbList )
    private

	  	function    GetData( index : integer ) : TPgCrossPoint;

  	public
        // コンストラクタ
        constructor Create; override;

        // デストラクタ
        destructor 	Destroy; override;

//        function    Load( fn : string ) : Boolean;
//        function    Search( port : string ) : string;
//        function    SearchDeviceID( id : string ) : TPgDeviceData;
//		procedure   ClearAll;

 		property    Data[index:integer] : TPgCrossPoint	read GetData;
    end;


//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TPgMultiViewList = class( TProgramDbList )
    private

	  	function    GetData( index : integer ) : TPgMvDstButton;

  	public
        // コンストラクタ
        constructor Create; override;

        // デストラクタ
        destructor 	Destroy; override;

//        function    Load( fn : string ) : Boolean;
//        function    Search( port : string ) : string;
//        function    SearchDeviceID( id : string ) : TPgDeviceData;
//		procedure   ClearAll;

 		property    Data[index:integer] : TPgMvDstButton	read GetData;
    end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TProgramDb = class( TObject )
    private

        FSourceList     : TXPTSourceList;
        FDeviceList     : TPgDeviceList;
        FDestList       : TPgDestinationList;
        FCrosspointList : TPgCrossPointList;
        FMultiViewList  : TPgMultiViewList;

        procedure   PgDeviceLoad( cnl : IXMLNodeList );
        procedure   XPTSourceLoad( cnl : IXMLNodeList );
        procedure   PgPanelKeyLoad( cnl : IXMLNodeList );
        procedure   PgDestinationLoad( cnl : IXMLNodeList );
        procedure   PgCrossPointLoad( cnl : IXMLNodeList );
        procedure   PgMvDstButtonLoad( cnl : IXMLNodeList );

  	public
        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

        function    Load( fn : string ) : Boolean;

{
        function    Search( port : integer ) : string;
		procedure   ClearAll;
 		property Data[index:integer] : TXPTSourceData	read GetData;
}

        property    SourceList : TXPTSourceList             read FSourceList;
        property    DeviceList : TPgDeviceList              read FDeviceList;
        property    DestinationList : TPgDestinationList    read FDestList;
        property    CrosspointList : TPgCrossPointList      read FCrosspointList;
        property    MultiViewList : TPgMultiViewList        read FMultiViewList;

    end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TProgramIndex   = class( TObject )

        F_Id                : string;
        F_CategoryName      : string;
        F_CategoryName2     : string;
        F_CategoryName3     : string;
        F_ProgramName       : string;
        F_IsLocked          : string;
        F_CreatedDateTime   : string;
        F_UpdatedDateTime   : string;
        F_CategoryOrder     : string;
        F_CategoryOrder2    : string;
        F_CategoryOrder3    : string;
        F_ProgramMemo       : string;
        F_ProgramOrder      : string;

        F_SystemMode        : string;

  	public
        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;
    end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TPiCategory   = class( TObject )

        F_Id                : string;
        F_CategoryName      : string;
        F_Order             : string;

  	public
        // コンストラクタ
        constructor     Create; virtual;

        // デストラクタ
        destructor 	    Destroy; override;
    end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TProgramIndexList   = class( TObjectList )
    private

        function    GetData( index : integer ) : TProgramIndex;

  	public
        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

        property    Data[index:integer] : TProgramIndex       read GetData;

    end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TPiCategoryList   = class( TObjectList )
    private

        function    GetData( index : integer ) : TPiCategory;

  	public
        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

        property    Data[index:integer] : TPiCategory       read GetData;
    end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TProgramIndexDb = class( TObject )
    private

        FProgramList    : TProgramIndexList;
        FPiCategoryList : array [0..2] of TPiCategoryList;

        procedure   ProgramIndexLoad( cnl : IXMLNodeList );
        procedure   PiCategoryLoad( cnl : IXMLNodeList; cate : integer );

        function    GetPiCategoryList( cate : integer ) : TPiCategoryList;
  	public
        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

        function    Load( fn : string ) : Boolean;

        property    ProgramList : TProgramIndexList     read FProgramList;
        property    PiCategoryList[cate:integer] : TPiCategoryList    read GetPiCategoryList;

    end;


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TSbDevice   = class( TObject )

        F_Id                    : string;
        F_StationId             : string;
        F_TypeName              : string;
        F_Name                  : string;
        F_IpAddress             : string;
        F_TimeoutMsec           : string;
        F_IsSendTarget          : string;
        F_IsRecvTarget          : string;
        F_IsKeyAssign           : string;
        F_KeyAssignPageCount    : string;
        F_IsEditLocked          : string;
        F_DeviceCategoryName    : string;
        F_IsNsbusDevice         : string;

        F_Is4kHdChangeSendTarget: string;
        F_ParentStationId       : string;
        F_Attribute             : string;
        F_SentSystemMode        : string;

    public

        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

    end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TSbDeviceList = class( TObjectList )
    private

	  	function    GetData( index : integer ) : TSbDevice;

  	public
        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

//        function    Search( port : integer ) : string;
//        function    SearchDeviceID( id : string ) : TPgDeviceData;
//		procedure   ClearAll;

 		property    Data[index:integer] : TSbDevice	read GetData;
    end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TSbPanelType    = class( TObject )

        F_Id                        : string;
        F_Name                      : string;
        F_Note                      : string;
        F_UiKey                     : string;
        F_PageCount                 : string;
        F_HasBusNameLabel           : string;
        F_KeyCount                  : string;
        F_HasControlDst             : string;
        F_CanCdsAssign              : string;
        F_CanSrcAssign              : string;
        F_CanDstAssign              : string;
        F_CanFncAssign              : string;
        F_AssignCancelSrcDstGpSel   : string;
        F_CdsStartBytes             : string;
        F_CdsPageByteCount          : string;
        F_CdsIsLitteEndian          : string;
        F_SrcStartBytes             : string;
        F_SrcPageByteCount          : string;
        F_DstStartBytes             : string;
        F_DstPageByteCount          : string;
        F_IsCdstAutoAssign          : string;
        F_CanPageCountSetting       : string;
        F_CanDstAssignEachPages     : string;
        F_AvailablePageStartBytes   : string;

        F_SrcDstAreaZeroClearDisabled   : string;
        F_IsSrcDstBothPanel             : string;
        F_IsManualInputModeSupported    : string;
        F_IsOpeMdEnabled                : string;
        F_IsOpeBpsEnabled               : string;

    public

        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;
    end;


//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TSbPanelTypeList = class( TObjectList )
    private

	  	function    GetData( index : integer ) : TSbPanelType;

  	public
        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

//        function    Search( port : integer ) : string;
//        function    SearchDeviceID( id : string ) : TPgDeviceData;
//		procedure   ClearAll;

 		property    Data[index:integer] : TSbPanelType	read GetData;
    end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TSbDeviceType   = class( TObject )

        F_Id                    : string;
        F_Name                  : string;
        F_PanelTypeId           : string;
        F_IsSubnetControllable  : string;
        F_IsSoapSupported       : string;
        F_IsNsbusDevice         : string;

        F_IsPanelTypeVisible    : string;

    public

        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

    end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TSbDevicetypeList = class( TObjectList )
    private

        function    GetData( index : integer ) : TSbDeviceType;

  	public
        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

 		property    Data[index:integer] : TSbDeviceType	read GetData;
    end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TSbXptBus   = class( TObject )

        F_Id                : string;
        F_Name              : string;
        F_Text              : string;
        F_RecvLevelNo       : string;
        F_SendLevelBitMask  : string;
        F_SendLevelBitMaskOffLine       : string;
        F_DstPortNoRange    : string;
        F_SrcPortNoRange    : string;
        F_NoAssignDstNo     : string;
        F_NoAssignSrcNo     : string;
        F_IsVirtual         : string;

    public

        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

    end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TSbXptBusList = class( TObjectList )
    private

        function    GetData( index : integer ) : TSbXptBus;

  	public
        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

 		property    Data[index:integer] : TSbXptBus	read GetData;
    end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TSbSrcNameBus   = class( TObject )

        F_Id                    : string;
        F_Name                  : string;
        F_AliasNo               : string;
        F_SrcPortNoRange        : string;
        F_IsProgramSendTarget   : string;
        F_Note                  : string;

    public

        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

    end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TSbSrcNameBusList = class( TObjectList )
    private

        function    GetData( index : integer ) : TSbSrcNameBus;

  	public
        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

 		property    Data[index:integer] : TSbSrcNameBus	read GetData;
    end;


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TSbSrcNameGroup   = class( TObject )

        F_Id                    : string;
        F_Name                  : string;
        F_AliasNo               : string;
        F_SrcPortNoRange        : string;
        F_IsProgramSendTarget   : string;
        F_Note                  : string;

    public

        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

    end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TSbSrcNameGroupList = class( TObjectList )
    private

        function    GetData( index : integer ) : TSbSrcNameGroup;

  	public
        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

 		property    Data[index:integer] : TSbSrcNameGroup	read GetData;
    end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TSbDstNameBus   = class( TObject )

        F_Id                    : string;
        F_Name                  : string;
        F_AliasNo               : string;
        F_DstPortNoRange        : string;
        F_IsProgramSendTarget   : string;
        F_Note                  : string;

    public

        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

    end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TSbDstNameBusList = class( TObjectList )
    private

        function    GetData( index : integer ) : TSbDstNameBus;

  	public
        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

 		property    Data[index:integer] : TSbDstNameBus	read GetData;
    end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TSbPanelFunctionKeyDefine   = class( TObject )

        F_Id                    : string;
        F_Text                  : string;

    public

        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

    end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TSbPanelFunctionKeyDefineList = class( TObjectList )
    private

        function    GetData( index : integer ) : TSbPanelFunctionKeyDefine;

  	public
        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

 		property    Data[index:integer] : TSbPanelFunctionKeyDefine	read GetData;
    end;


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TSbPanelFunctionKeyMapping   = class( TObject )

        F_Id                    : string;
        F_PanelTypeId           : string;
        F_FunctionId            : string;
        F_FunctionNo            : string;

    public

        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

    end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TSbPanelFunctionKeyMappingList = class( TObjectList )
    private

        function    GetData( index : integer ) : TSbPanelFunctionKeyMapping;

  	public
        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

 		property    Data[index:integer] : TSbPanelFunctionKeyMapping    read GetData;
    end;


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TSbSettings   = class( TObject )

        F_ValueId           : string;
        F_Value             : string;

    public

        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

    end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TSbSettingsList = class( TObjectList )
    private

        function    GetData( index : integer ) : TSbSettings;

  	public
        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

 		property    Data[index:integer] : TSbSettings    read GetData;
    end;




//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TSBusDb = class( TObject )
    private

        FSbDeviceList       : TSbDeviceList;
        FSbPanelTypeList    : TSbPanelTypeList;
        FSbDeviceTypeList   : TSbDeviceTypeList;
        FSbXptBusList       : TSbXptBusList;
        FSbSrcNameBusList   : TSbSrcNameBusList;
        FSbSrcNameGroupList : TSbSrcNameGroupList;
        FSbDstNameBusList   : TSbDstNameBusList;

        FSbPanelFunctionKeyDefineList   : TSbPanelFunctionKeyDefineList;
        FSbPanelFunctionKeyMappingList  : TSbPanelFunctionKeyMappingList;

        FSbSettingsList     : TSbSettingsList;

        function    SbDeviceLoad( cnl : IXMLNodeList ) : TSbDevice;
        function    SbPanelTypeLoad( cnl : IXMLNodeList ) : TSbPanelType;
        function    SbDeviceTypeLoad( cnl : IXMLNodeList ) : TSbDeviceType;
        procedure   SbXptBusLoad( cnl : IXMLNodeList );
        procedure   SbSrcNameBusLoad( cnl : IXMLNodeList );
        procedure   SbSrcNameGroupLoad( cnl : IXMLNodeList );
        procedure   SbDstNameBusLoad( cnl : IXMLNodeList );
        procedure   SbPanelFunctionKeyDefineLoad( cnl : IXMLNodeList );
        procedure   SbPanelFunctionKeyMappingLoad( cnl : IXMLNodeList );
        procedure   SbSettingsLoad( cnl : IXMLNodeList );

  	public
        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

        function    Load( fn : string ) : Boolean;

        property    SbDeviceList : TSbDeviceList            read FSbDeviceList;
        property    SbPanelTypeList : TSbPanelTypeList      read FSbPanelTypeList;
        property    SbDeviceTypeList : TSbDeviceTypeList    read FSbDeviceTypeList;
        property    SbXptBusList : TSbXptBusList            read FSbXptBusList;

        property    SbSettingsList : TSbSettingsList        read FSbSettingsList;
    end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TAcTerminal    = class( TObject )

        F_Id                                : string;
        F_Name                              : string;
        F_IpAddress                         : string;
        F_IsSaveButtonEnabled               : string;
        F_IsDefaultProgramLockButtonEnabled : string;
        F_IsRecBusNameEditable              : string;
        F_PermissionId                      : string;
        F_UnDeletable                       : string;
        F_IsServer                          : string;
        F_IsImExEnabled                     : string;
        F_IsLocked                          : string;
        F_IsOffLineTerminal                 : string;

        F_IsAllGroupEnabled                 : string;
        F_OnLineButtonEnabled               : string;
        F_IsPanelPageNameEditEnabled        : string;

    public

        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;
    end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TAcTerminalList = class( TObjectList )
    private

	  	function    GetData( index : integer ) : TAcTerminal;

  	public
        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

        procedure   ClearAll;

 		property    Data[index:integer] : TAcTerminal	read GetData;
    end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TAcPermission    = class( TObject )

        F_Id                                : string;
        F_Name                              : string;
        F_Description                       : string;
        F_IsRejectFilter                    : string;

    public

        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;
    end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TAcPermissionList = class( TObjectList )
    private

	  	function    GetData( index : integer ) : TAcPermission;

  	public
        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

        procedure   ClearAll;

 		property    Data[index:integer] : TAcPermission	read GetData;
    end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TAcFilter    = class( TObject )

        F_Id                                : string;
        F_PermissionId                      : string;
        F_TargetTypeName                    : string;
        F_TargetInstanceId                  : string;
        F_Enabled                           : string;

    public

        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;
    end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TAcFilterList = class( TObjectList )
    private

	  	function    GetData( index : integer ) : TAcFilter;

  	public
        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

        procedure   ClearAll;

 		property    Data[index:integer] : TAcFilter	read GetData;
    end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
    TAccountDb = class( TObject )
    private

        FAcTerminalList     : TAcTerminalList;
        FAcPermissionList   : TAcPermissionList;
        FAcFilterList       : TAcFilterList;

        procedure   AcTerminalload( cnl : IXMLNodeList );
        procedure   AcPermissionLoad( cnl : IXMLNodeList );
        procedure   AcFilterLoad( cnl : IXMLNodeList );

  	public
        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

        function    Load( fn : string ) : Boolean;

        property    AcTerminalList : TAcTerminalList        read FAcTerminalList;
        property    AcPermissionList : TAcPermissionList    read FAcPermissionList;
        property    AcFilterList : TAcFilterList            read FAcFilterList;

    end;


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    TLayoutList = class( TObjectList )
    private

  	public
        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;
    end;

    TLayoutData = class( TObject )
    private

        FFrame          : TUiFrame;                     // 親フレーム
        FList           : TScreenList;

        FChild          : array [0..1] of TLayoutList;  // 子供
                                                        // 0:DESTINATION
                                                        // 1:SOURCE

        function    GetChild( index : integer ) : TLayoutList;
        procedure   SetChild( index : integer; ly : TLayoutList );

  	public
        // コンストラクタ
        constructor Create; virtual;

        // デストラクタ
        destructor 	Destroy; override;

        function    IsEmpty : Boolean;

        property    Frame : TUiFrame        read FFrame     write FFrame;
        property    List : TScreenList      read FList      write FList;
        property    Child[index:integer] : TLayoutList  read GetChild   write SetChild;

    end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

implementation

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TScreenList.GetChildFrame( id : integer ) : integer;
var
    s : TScreenDb;
    i, ret : integer;
    u : TUiFrame;
    idstr : string;

begin

    idstr := IntToStr( id );

    ret := 0;
    for i:=0 to Count-1 do begin

        s := Data[i];

        if 0 <> s.FDataType then continue;

        u := TUiFrame( s );
        if (True = u.E_ParentFrameId) and (idstr = u.F_ParentFrameId) then begin

            Inc( ret );

        end;

    end;

    Result := ret;
end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
procedure TScreenList.AllExtract( opt : integer );
var
    s : TScreenDb;

begin
    while True do begin
        s := Data[0];
        if s = nil then break;

            case opt of
            1:
                begin
                    s.FPanel.Color := clSilver;
                end;
            end;

//        s.FPanel.Visible    := False;
//        s.FPanel.Parent     := nil;

        Extract( s );
    end;
end;

{
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
procedure TScreenList.AllExtract2;
var
    s : TScreenDb;
    i : integer;

begin
    for i:=0 to Count-1 do begin

        s := Data[i];
        if s = nil then break;

        s.FPanel.Visible    := False;
        s.FPanel.Parent     := nil;

    end;
end;
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
procedure TScreenList.AllExtract3;
var
    s : TScreenDb;

begin
    while True do begin
        s := Data[0];
        if s = nil then break;

        s.FPanel.Visible    := False;
        s.FPanel.Parent     := nil;

        Extract( s );
    end;
end;

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TScreenDb.Create;
begin
    Inherited;

    FPanel  := TPanel.Create( nil );

    FPanel.Parent           := nil;
    FPanel.Visible          := False;
    FPanel.ParentBackGround := False;
    FPanel.Color            := clSilver;
    FPanel.Caption          := '';
//    FPanel.BevelOuter   := bvNone;
    FPanel.BevelOuter       := bvLowered;
    FPanel.Alignment        := taLeftJustify;
    FPanel.VerticalAlignment := taAlignTop;

    FPanel.Font.Name        := 'メイリオ';
    FPanel.Font.Size        := 8;
    FPanel.Font.Style       := [fsBold];

end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
destructor TScreenDb.Destroy;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
procedure TScreenDb.SetPosition( pa : TWinControl; rct : TRect; cap : string );
begin
    if pa = nil then begin
        FPanel.Visible := False;
    end
    else begin
        FPanel.Left    := rct.Left;
        FPanel.Top     := rct.Top;
        FPanel.Width   := rct.Right;
        FPanel.Height  := rct.Bottom;
        FPanel.Visible := True;
    end;

    FPanel.Caption      := cap;

    FPanel.Parent := pa;
end;


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TUiFrame.Create;
begin

    inherited;

    FDataType           := 0;

    F_Id                := 0;
    E_Id                := False;

    F_TitleText         := '';
    E_TitleText         := False;

    F_TitleBarVisible   := '';
    E_TitleBarVisible   := False;

    F_Name              := '';
    E_Name              := False;

    F_BackColor         := '';
    E_BackColor         := False;

    F_IsModal           := '';
    E_IsModal           := False;

    F_Order             := '';
    E_Order             := False;

    F_Left              := '';
    E_Left              := False;

    F_Width             := '';
    E_Width             := False;

    F_Top               := '';
    E_Top               := False;

    F_Height            := '';
    E_Height            := False;

    F_BorderWidth       := '';
    E_BorderWidth       := False;

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TUiFrame.Destroy;
begin

    inherited;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TUiScreenSelectButton.Create;
begin

    inherited;

    FDataType           := 1;

    F_Id                := 1;
    E_Id                := True;

    F_FrameId           := '';
    E_FrameId           := False;

    F_FrameName         := '';
    E_FrameName         := False;

    F_Order             := '';
    E_Order             := False;

    F_Left              := '';
    E_Left              := False;

    F_Width             := '';
    E_Width             := False;

    F_Top               := '';
    E_Top               := False;

    F_Height            := '';
    E_Height            := False;

    F_IncludeHeadbar    := '';
    E_IncludeHeadbar    := False;

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TUiScreenSelectButton.Destroy;
begin

    inherited;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TUiList.Create;
begin
    inherited;

    FDataType           := 2;

    F_FrameId           := '';
    E_FrameId           := False;

    F_ListType          := '';
    E_ListType          := False;

    F_DefaultSortColumnName     := '';
    E_DefaultSortColumnName     := False;

    F_AllowMultiSort    := '';
    E_AllowMultiSort    := False;

    F_FilterButtonWidth := '';
    E_FilterButtonWidth := False;

    F_RowHeight         := '';
    E_RowHeight         := False;

    F_RowHeaderColumnName     := '';
    E_RowHeaderColumnName     := False;

    F_ColumnFontSize    := '';
    E_ColumnFontSize    := False;

    F_CellFontSize      := '';
    E_CellFontSize      := False;

    F_Order             := '';
    E_Order             := False;

    F_Left              := '';
    E_Left              := False;

    F_Width             := '';
    E_Width             := False;

    F_Top               := '';
    E_Top               := False;

    F_Height            := '';
    E_Height            := False;

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TUiList.Destroy;
begin

    inherited;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TUiListColumn.Create;
begin

    inherited;

    FDataType           := 3;

    F_ListId    := '';
    E_ListId    := False;

    F_Order     := '';
    E_Order     := False;

    F_Width     := '';
    E_Width     := False;

    F_IsVisible := '';
    E_IsVisible := False;

    F_IsReadOnly        := '';
    E_IsReadOnly        := False;

    F_Text          := '';
    E_Text          := False;

    F_ColName       := '';
    E_ColName       := False;


    F_ColHeaderClickAction  := '';
    E_ColHeaderClickAction  := False;

    F_CellType      := '';
    E_CellType      := False;

    F_AllowSort     := '';
    E_AllowSort     := False;

    F_AllowFilter   := '';
    E_AllowFilter   := False;

    F_AllowWideChar := '';
    E_AllowWideChar := False;

    F_MaxLangth     := '';
    E_MaxLangth     := False;

    F_MaxLengthIsBytes  := '';
    E_MaxLengthIsBytes  := False;

    F_CellTextHAlign    := '';
    E_CellTextHAlign    := False;

    F_CanReEntry        := '';
    E_CanReEntry        := False;

    F_IsCellButtonCol   := '';
    E_IsCellButtonCol   := False;

    F_IsRowSelectSync   := '';
    E_IsRowSelectSync   := False;

    F_BoolTrueText      := '';
    E_BoolTrueText      := False;

    F_BoolFalseText     := '';
    E_BoolFalseText     := False;
end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TUiListColumn.Destroy;
begin

    inherited;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TUiContent.Create;
begin

    inherited;

    FDataType   := 4;

    F_FrameId   := '';
    E_FrameId   := False;

    F_Text      := '';
    E_Text      := False;

    F_UiType    := '';
    E_UiType    := False;

    F_Order     := '';
    E_Order     := False;

    F_Left      := '';
    E_Left      := False;

    F_Width     := '';
    E_Width     := False;

    F_Top       := '';
    E_Top       := False;

    F_Height    := '';
    E_Height    := False;

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TUiContent.Destroy;
begin

    inherited;

end;


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TUiListCellButton.Create;
begin

    inherited;

    FDataType       := 5;

    F_ColumnId      := '';
    E_ColumnId      := False;

    F_Order         := '';
    E_Order         := False;

    F_Width         := '';
    E_Width         := False;

    F_Text          := '';
    E_Text          := False;

    F_ClickAction   := '';
    E_ClickAction   := False;

    F_IsDefaultRowVisible   := '';
    E_IsDefaultRowVisible   := False;

    F_IsStandartRowVisible  := '';
    E_IsStandartRowVisible  := False;

    F_FontSize              := '';
    E_FontSize              := False;

    F_IsRowSelectSync       := '';
    E_IsRowSelectSync       := False;

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TUiListCellButton.Destroy;
begin

    inherited;

end;


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TUiDstButton.Create;
begin

    inherited;

    FDataType   := 6;

    F_Id        := 1;
    E_Id        := True;

    F_FrameId   := '';
    E_FrameId   := False;

    F_DstPortNo := '';
    E_DstPortNo := False;

    F_Order     := '';
    E_Order     := False;

    F_Left      := '';
    E_Left      := False;

    F_Width     := '';
    E_Width     := False;

    F_Top       := '';
    E_Top       := False;

    F_Height    := '';
    E_Height    := False;

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TUiDstButton.Destroy;
begin

    inherited;

end;


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TUiSrcButton.Create;
begin

    inherited;

    FDataType   := 7;

    F_Id        := 1;
    E_Id        := True;

    F_FrameId   := '';
    E_FrameId   := False;

    F_SrcPortNo := '';
    E_SrcPortNo := False;

    F_Order     := '';
    E_Order     := False;

    F_Left      := '';
    E_Left      := False;

    F_Width     := '';
    E_Width     := False;

    F_Top       := '';
    E_Top       := False;

    F_Height    := '';
    E_Height    := False;

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TUiSrcButton.Destroy;
begin

    inherited;

end;


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TUiPanelKeyButton.Create;
begin

    inherited;

    FDataType   := 8;

    F_FrameId   := '';
    E_FrameId   := False;

    F_ButtonNo  := '';
    E_ButtonNo  := False;

    F_CopyButtonNo  := '';
    E_CopyButtonNo  := False;

    F_Order     := '';
    E_Order     := False;

    F_Left      := '';
    E_Left      := False;

    F_Width     := '';
    E_Width     := False;

    F_Top       := '';
    E_Top       := False;

    F_Height    := '';
    E_Height    := False;
end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TUiPanelKeyButton.Destroy;
begin

    inherited;

end;


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TUiPanelDstButton.Create;
begin

    inherited;

    FDataType   := 9;

    F_FrameId   := '';
    E_FrameId   := False;

    F_DstPortNo := '';
    E_DstPortNo := False;

    F_Order     := '';
    E_Order     := False;

    F_Left      := '';
    E_Left      := False;

    F_Width     := '';
    E_Width     := False;

    F_Top       := '';
    E_Top       := False;

    F_Height    := '';
    E_Height    := False;

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TUiPanelDstButton.Destroy;
begin

    inherited;

end;


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TUiPanelSrcButton.Create;
begin

    inherited;

    FDataType   := 10;

    F_FrameId   := '';
    E_FrameId   := False;

    F_SrcPortNo := '';
    E_SrcPortNo := False;

    F_Order     := '';
    E_Order     := False;

    F_Left      := '';
    E_Left      := False;

    F_Width     := '';
    E_Width     := False;

    F_Top       := '';
    E_Top       := False;

    F_Height    := '';
    E_Height    := False;

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TUiPanelSrcButton.Destroy;
begin

    inherited;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TUiColorSrcKeyButton.Create;
begin

    inherited;

    FDataType   := 11;

    F_FrameId   := '';
    E_FrameId   := False;

    F_SrcPortNo := '';
    E_SrcPortNo := False;

    F_Order     := '';
    E_Order     := False;

    F_Left      := '';
    E_Left      := False;

    F_Width     := '';
    E_Width     := False;

    F_Top       := '';
    E_Top       := False;

    F_Height    := '';
    E_Height    := False;

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TUiColorSrcKeyButton.Destroy;
begin

    inherited;

end;


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TScreenList.Create;
begin

    inherited;

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TScreenList.Destroy;
begin

    inherited;

end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TScreenList.GetData( index : integer ) : TScreenDb;
begin
    Result := nil;

    if (index < 0) or (Count <= index) then Exit;

    Result := TScreenDb( Items[ index ] );
end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
procedure TScreenList.ClearAll;
var
    dt : TScreenDb;

begin
    while True do begin
        dt := Data[0];
        if nil = dt then break;

        Extract( dt );
        dt.Free;
    end;

end;

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function TScreenList.Search( bType, bId : integer ) : TScreenDb;
var
    s : TScreenDb;
    i : integer;

begin
    for i:=0 to Count-1 do begin
        s := Data[i];
        if (bId = s.F_Id) and (bType = s.FDataType) then begin
            Result := s;
            Exit;
        end;
    end;

    Result := nil;
end;

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function TScreenList.SearchByName( bType : integer; nm : string ) : TScreenDb;
var
    s : TScreenDb;
    i : integer;
    u : TUiFrame;

begin
    for i:=0 to Count-1 do begin
        s := Data[i];
        if bType = s.FDataType then begin

            case bType of
            UiFrame_No:
                begin
                    u := TUiFrame( s );
                    if nm = u.F_Name then begin
                        Result := s;
                        Exit;
                    end;
                end;
            else
                ;
            end;

        end;
    end;

    Result := nil;
end;

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function TScreenList.SearchList( id : string ) : TUiList;
var
    s : TScreenDb;
    i : integer;

begin
    for i:=0 to Count-1 do begin
        s := Data[i];
        if (2 = s.FDataType) and (id = IntToStr( s.F_id )) then begin
            Result := TUiList( s );
            Exit;
        end;
    end;

    Result := nil;
end;

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function TScreenList.SearchButton( bType : integer; bId : string; lst : TScreenList ) : integer;
var
    s : TUiScreenSelectButton;
    i : integer;

begin
    for i:=0 to Count-1 do begin
        s := TUiScreenSelectButton( Data[i] );

        if (bType = s.FDataType) and (bId = s.F_FrameId) then begin
            lst.Add( s );
        end;
    end;

    Result := lst.Count;
end;

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function TScreenList.SearchButton( bType : integer; bId : string ) : TUiScreenSelectButton;
var
    s : TUiScreenSelectButton;
    i : integer;

begin
    for i:=0 to Count-1 do begin
        s := TUiScreenSelectButton( Data[i] );

        if (bType = s.FDataType) and (StrToIntDef(bId, 0) = s.F_Id) then begin
            Result := s;
            Exit;
        end;
    end;

    Result := nil;
end;

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function TScreenList.SearchSource( bType : integer; bId : string; lst : TScreenList ) : integer;
var
    s : TUiSrcButton;
    i : integer;

begin
    for i:=0 to Count-1 do begin
        s := TUiSrcButton( Data[i] );

        if (bType = s.FDataType) and (bId = s.F_FrameId) then begin
            lst.Add( s );
        end;
    end;

    Result := lst.Count;
end;


//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function TScreenList.SearchParent( bType : integer; bId : string; lst : TScreenList ) : integer;
var
    s : TUiFrame;
    i : integer;

begin
    for i:=0 to Count-1 do begin
        s := TUiFrame( Data[i] );

        if (bType = s.FDataType) and (bId = s.F_ParentFrameId) then begin
            lst.Add( s );
        end;
    end;

    Result := lst.Count;
end;

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function TScreenList.ScreenDbLoad( fn : string ) : Boolean;
var
    xml : IXMLDocument;
   	cnl, cnl0 : IXMLNodeList;
    j, n : integer;
	a : string;
//    count : array [0..15] of integer;

    s : TScreenDb;

begin
    Result := False;

    // ファイルなし
    if False = FileExists( fn ) then Exit;

    // XML読み込み
    xml	:= LoadXMLDocument( fn );

    // 'ScreenDb'
    cnl0	:= xml.DocumentElement.ChildNodes;

    for j:=0 to cnl0.Count-1 do begin

        a    := cnl0.Nodes[j].NodeName;

        n := AnsiIndexStr( a, FScreenDbTable );
        if n = -1 then begin
            beep;
            continue;
        end;

//        Inc( count[ n ] );

        cnl		:= cnl0.Nodes[j].ChildNodes;

        case n of
        0:  s := UiFrameLoad( cnl );
        1:  s := UiScreenSelectButtonLoad( cnl );
        2:  s := UiListLoad( cnl );
        3:  s := UiListColumnLoad( cnl );
        4:  s := UiContentLoad( cnl );
        5:  s := UiListCellButtonLoad( cnl );
        6:  s := UiDstButtonLoad( cnl );
        7:  s := UiSrcButtonLoad( cnl );
        8:  s := UiPanelKeyButtonLoad( cnl );
        9:  s := UiPanelDstButtonLoad( cnl );
        10: s := UiPanelSrcButtonLoad( cnl );
        11: s := UiColorSrcKeyButtonLoad( cnl );

        else
            s := nil;
        end;

        if s <> nil then begin
            Add( s );
        end;

    end;

{
    m := 0;
    for j:=0 to HIGH( count ) do begin
        m := m + count[j];
    end;
}
    Result := False;
end;


//------------------------------------------------------------------------------
//  XMLファイル書き込み
//------------------------------------------------------------------------------
procedure TScreenList.ScreenDbSave( fn : string );
var
	XML_Doc     : IXMLDocument;
    s : TScreenDb;
    i : integer;

begin

	// XML書き込み処理
    XML_Doc 			:= TXMLDocument.Create(nil);

	// 出力時にインデント
    XML_Doc.Options 	:= [doNodeAutoIndent];
	XML_Doc.Active  	:= True;
//    XML_Doc.Encoding	:= 'UTF-8';
//    XML_Doc.Version		:= '1.0';

    // ルート
    XML_Doc.AddChild( 'ScreenDb' );

    for i:=0 to Count-1 do begin

        s := {FScreenList.}Data[i];

        case s.FDataType of
        0:  UiFrameSave( XML_Doc, TUiFrame( s ) );
        1:  UiScreenSelectButtonSave( XML_Doc, TUiScreenSelectButton( s ) );
        2:  UiListSave( XML_Doc, TUiList( s ) );
        3:  UiListColumnSave( XML_Doc, TUiListColumn( s ) );
        4:  UiContentSave( XML_Doc, TUiContent( s ) );
        5:  UiListCellButtonSave( XML_Doc, TUiListCellButton( s ) );
        6:  UiDstButtonSave( XML_Doc, TUiDstButton( s ) );
        7:  UiSrcButtonSave( XML_Doc, TUiSrcButton( s ) );
        8:  UiPanelKeyButtonSave( XML_Doc, TUiPanelKeyButton( s ) );
        9:  UiPanelDstButtonSave( XML_Doc, TUiPanelDstButton( s ) );
        10: UiPanelSrcButtonSave( XML_Doc, TUiPanelSrcButton( s ) );
        11: UiColorSrcKeyButtonSave( XML_Doc, TUiColorSrcKeyButton( s ) );
        end;

    end;

    // 保存
	try
    	if fn <> '' then	XML_Doc.SaveToFile( fn );
    except
		;
    end;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
const
    tbl : array [0..20] of string = (
        'F_Id',
        'F_Note',
        'F_ParentFrameId',
        'F_TitleText',
        'F_TitleBarHeightPix',
        'F_TitleBarVisible',
        'F_BackColor',
        'F_Type',
        'F_Name',
        'F_Attribute',
        'F_ColCount',
        'F_RowCount',
        'F_IsModal',
        'F_Order',
        'F_InnerOrder',
        'F_Left',
        'F_Width',
        'F_Top',
        'F_Height',
        'F_BorderWidth',
        'F_BorderColor'
    );

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function TScreenList.UiFrameLoad( cnl : IXMLNodeList ) : TUiFrame;
var
    j : integer;
    str, txt : string;
    u : TUiFrame;

begin

    u := TUiFrame.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        case AnsiIndexStr( str, tbl ) of
        0:
            begin
                u.F_Id                  := StrToIntDef( txt, -1 );
                u.E_Id                  := True;
            end;

        1:
            begin
                u.F_Note                := txt;
                u.E_Note                := True;
            end;

        2:
            begin
                u.F_ParentFrameId       := txt;
                u.E_ParentFrameId       := True;
            end;

        3:
            begin
                u.F_TitleText           := txt;
                u.E_TitleText           := True;
            end;

        4:
            begin
                u.F_TitleBarHeightPix   := txt;
                u.E_TitleBarHeightPix   := True;
            end;

        5:
            begin
                u.F_TitleBarVisible     := txt;
                u.E_TitleBarVisible     := True;
            end;

        6:
            begin
                u.F_BackColor           := txt;
                u.E_BackColor           := True;
            end;

        7:
            begin
                u.F_Type                := txt;
                u.E_Type                := True;
            end;

        8:
            begin
                u.F_Name                := txt;
                u.E_Name                := True;
            end;

        9:
            begin
                u.F_Attribute           := txt;
                u.E_Attribute           := True;
            end;

        10:
            begin
                u.F_ColCount            := txt;
                u.E_ColCount            := True;
            end;

        11:
            begin
                u.F_RowCount            := txt;
                u.E_RowCount            := True;
            end;

        12:
            begin
                u.F_IsModal             := txt;
                u.E_IsModal             := True;
            end;

        13:
            begin
                u.F_Order               := txt;
                u.E_Order               := True;
            end;

        14:
            begin
                u.F_InnerOrder          := txt;
                u.E_InnerOrder          := True;
            end;

        15:
            begin
                u.F_Left                := txt;
                u.E_Left                := True;
            end;

        16:
            begin
                u.F_Width               := txt;
                u.E_Width               := True;
            end;

        17:
            begin
                u.F_Top                 := txt;
                u.E_Top                 := True;
            end;

        18:
            begin
                u.F_Height              := txt;
                u.E_Height              := True;
            end;

        19:
            begin
                u.F_BorderWidth         := txt;
                u.E_BorderWidth         := True;
            end;

        20:
            begin
                u.F_BorderColor         := txt;
                u.E_BorderColor         := True;
            end;

        else
            beep;

        end;
    end;

    Result := u;
end;

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
procedure TScreenList.UiFrameSave( XML_Doc : IXMLDocument; u : TUiFrame );
var
	XML_rs    	: IXMLNode;
	XML_data2   : IXMLNode;
    x : integer;

begin

    XML_rs := XML_Doc.DocumentElement.AddChild( 'UiFrame' );

    x := 0;

    if True = u.E_Id then begin
        XML_data2 			:= XML_rs.AddChild( tbl[x] );
        XML_data2.NodeValue := u.F_Id;
    end;

    Inc( x );

    if True = u.E_Note then begin
        XML_data2 			:= XML_rs.AddChild( tbl[x] );
        XML_data2.NodeValue := u.F_Note;
    end;

    Inc( x );

    if True = u.E_ParentFrameId then begin
        XML_data2 			:= XML_rs.AddChild( tbl[x] );
        XML_data2.NodeValue := u.F_ParentFrameId;
    end;

    Inc( x );

    if True = u.E_TitleText then begin
        XML_data2 			:= XML_rs.AddChild( tbl[x] );
        XML_data2.NodeValue := u.F_TitleText;
    end;

    Inc( x );

    if True = u.E_TitleBarHeightPix then begin
        XML_data2 			:= XML_rs.AddChild( tbl[x] );
        XML_data2.NodeValue := u.F_TitleBarHeightPix;
    end;

    Inc( x );

    if True = u.E_TitleBarVisible then begin
        XML_data2 			:= XML_rs.AddChild( tbl[x] );
        XML_data2.NodeValue := u.F_TitleBarVisible;
    end;

    Inc( x );

    if True = u.E_BackColor then begin
        XML_data2 			:= XML_rs.AddChild( tbl[x] );
        XML_data2.NodeValue := u.F_BackColor;
    end;

    Inc( x );

    if True = u.E_Type then begin
        XML_data2 			:= XML_rs.AddChild( tbl[x] );
        XML_data2.NodeValue := u.F_Type;
    end;

    Inc( x );

    if True = u.E_Name then begin
        XML_data2 			:= XML_rs.AddChild( tbl[x] );
        XML_data2.NodeValue := u.F_Name;
    end;

    Inc( x );

    if True = u.E_Attribute then begin
        XML_data2 			:= XML_rs.AddChild( tbl[x] );
        XML_data2.NodeValue := u.F_Attribute;
    end;

    Inc( x );

    if True = u.E_ColCount then begin
        XML_data2 			:= XML_rs.AddChild( tbl[x] );
        XML_data2.NodeValue := u.F_ColCount;
    end;

    Inc( x );

    if True = u.E_RowCount then begin
        XML_data2 			:= XML_rs.AddChild( tbl[x] );
        XML_data2.NodeValue := u.F_RowCount;
    end;

    Inc( x );

    if True = u.E_IsModal then begin
        XML_data2 			:= XML_rs.AddChild( tbl[x] );
        XML_data2.NodeValue := u.F_IsModal;
    end;

    Inc( x );

    if True = u.E_Order then begin
        XML_data2 			:= XML_rs.AddChild( tbl[x] );
        XML_data2.NodeValue := u.F_Order;
    end;

    Inc( x );

    if True = u.E_InnerOrder then begin
        XML_data2 			:= XML_rs.AddChild( tbl[x] );
        XML_data2.NodeValue := u.F_InnerOrder;
    end;

    Inc( x );

    if True = u.E_Left then begin
        XML_data2 			:= XML_rs.AddChild( tbl[x] );
        XML_data2.NodeValue := u.F_Left;
    end;

    Inc( x );

    if True = u.E_Width then begin
        XML_data2 			:= XML_rs.AddChild( tbl[x] );
        XML_data2.NodeValue := u.F_Width;
    end;

    Inc( x );

    if True = u.E_Top then begin
        XML_data2 			:= XML_rs.AddChild( tbl[x] );
        XML_data2.NodeValue := u.F_Top;
    end;

    Inc( x );

    if True = u.E_Height then begin
        XML_data2 			:= XML_rs.AddChild( tbl[x] );
        XML_data2.NodeValue := u.F_Height;
    end;

    Inc( x );

    if True = u.E_BorderWidth then begin
        XML_data2 			:= XML_rs.AddChild( tbl[x] );
        XML_data2.NodeValue := u.F_BorderWidth;
    end;

    Inc( x );

    if True = u.E_BorderColor then begin
        XML_data2 			:= XML_rs.AddChild( tbl[x] );
        XML_data2.NodeValue := u.F_BorderColor;
    end;


end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
const
    tbl1 : array [0..22] of string = (
        'F_Id',
        'F_FrameId',
        'F_Text',
        'F_Key',
        'F_FrameName',
        'F_BeforeRelayKey',
        'F_Attributes',
        'F_Order',
        'F_Left',
        'F_Width',
        'F_Top',
        'F_Height',
        'F_BorderWidth',
        'F_IncludeHeadbar',

        'F_HeadbarColor',
        'F_HeadbarHeight',

        'F_HeadbarText',
        'F_HeadbarFontSize',

        'F_IsPermissionHandled',
        'F_IsSelectionCancel',
        'F_IsDisabled',

//2020.12.6
        'F_IsListItem',
        'F_FontSize'
    );

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function TScreenList.UiScreenSelectButtonLoad( cnl : IXMLNodeList ) : TUiScreenSelectButton;
var
    j : integer;
    str, txt : string;
    u : TUiScreenSelectButton;

begin

    u := TUiScreenSelectButton.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        case AnsiIndexStr( str, tbl1 ) of
        0:
            begin
                u.F_Id    := StrToIntDef( txt, -1 );
                u.E_Id    := True;
            end;

        1:
            begin
                u.F_FrameId     := txt;
                u.E_FrameId     := True;
            end;

        2:
            begin
                u.F_Text   := txt;
                u.E_Text   := True;
            end;

        3:
            begin
                u.F_Key   := txt;
                u.E_Key   := True;
            end;

        4:
            begin
                u.F_FrameName   := txt;
                u.E_FrameName   := True;
            end;

        5:
            begin
                u.F_BeforeRelayKey       := txt;
                u.E_BeforeRelayKey       := True;
            end;

        6:
            begin
                u.F_Attributes   := txt;
                u.E_Attributes   := True;
            end;

        7:
            begin
                u.F_Order       := txt;
                u.E_Order       := True;
            end;

        8:
            begin
                u.F_Left        := txt;
                u.E_Left        := True;
            end;

        9:
            begin
                u.F_Width        := txt;
                u.E_Width        := True;
            end;

        10:
            begin
                u.F_Top         := txt;
                u.E_Top         := True;
            end;

        11:
            begin
                u.F_Height      := txt;
                u.E_Height      := True;
            end;

        12:
            begin
                u.F_BorderWidth      := txt;
                u.E_BorderWidth     := True;
            end;

        13:
            begin
                u.F_IncludeHeadbar   := txt;
                u.E_IncludeHeadbar   := True;
            end;

        14:
            begin
                u.F_HeadbarColor   := txt;
                u.E_HeadbarColor   := True;
            end;

        15:
            begin
                u.F_HeadbarHeight   := txt;
                u.E_HeadbarHeight   := True;
            end;

        16:
            begin
                u.F_HeadbarText   := txt;
                u.E_HeadbarText   := True;
            end;

        17:
            begin
                u.F_HeadbarFontSize   := txt;
                u.E_HeadbarFontSize   := True;
            end;

        18:
            begin
                u.F_IsPermissionHandled   := txt;
                u.E_IsPermissionHandled   := True;
            end;

        19:
            begin
                u.F_IsSelectionCancel   := txt;
                u.E_IsSelectionCancel   := True;
            end;

        20:
            begin
                u.F_IsDisabled  := txt;
                u.E_IsDisabled  := True;
            end;

        21:
            begin
                u.F_IsListItem  := txt;
                u.E_IsListItem  := True;
            end;

        22:
            begin
                u.F_FontSize    := txt;
                u.E_FontSize    := True;
            end;

        else
            beep
        end;
    end;

    Result := u;
end;

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
procedure TScreenList.UiScreenSelectButtonSave( XML_Doc : IXMLDocument; u : TUiScreenSelectButton );
var
	XML_rs    	: IXMLNode;
	XML_data2   : IXMLNode;
    x : integer;

begin

    XML_rs := XML_Doc.DocumentElement.AddChild( 'UiScreenSelectButton' );

    x := 0;

    if True = u.E_Id then begin
        XML_data2 			:= XML_rs.AddChild( tbl1[x] );
        XML_data2.NodeValue := u.F_Id;
    end;

    Inc( x );

    if True = u.E_FrameId then begin
        XML_data2 			:= XML_rs.AddChild( tbl1[x] );
        XML_data2.NodeValue := u.F_FrameId;
    end;

    Inc( x );

    if True = u.E_Text then begin
        XML_data2 			:= XML_rs.AddChild( tbl1[x] );
        XML_data2.NodeValue := u.F_Text;
    end;

    Inc( x );

    if True = u.E_Key then begin
        XML_data2 			:= XML_rs.AddChild( tbl1[x] );
        XML_data2.NodeValue := u.F_Key;
    end;

    Inc( x );

    if True = u.E_FrameName then begin
        XML_data2 			:= XML_rs.AddChild( tbl1[x] );
        XML_data2.NodeValue := u.F_FrameName;
    end;

    Inc( x );

    if True = u.E_BeforeRelayKey then begin
        XML_data2 			:= XML_rs.AddChild( tbl1[x] );
        XML_data2.NodeValue := u.F_BeforeRelayKey;
    end;

    Inc( x );

    if True = u.E_Attributes then begin
        XML_data2 			:= XML_rs.AddChild( tbl1[x] );
        XML_data2.NodeValue := u.F_Attributes;
    end;

    Inc( x );

    if True = u.E_Order then begin
        XML_data2 			:= XML_rs.AddChild( tbl1[x] );
        XML_data2.NodeValue := u.F_Order;
    end;

    Inc( x );

    if True = u.E_Left then begin
        XML_data2 			:= XML_rs.AddChild( tbl1[x] );
        XML_data2.NodeValue := u.F_Left;
    end;

    Inc( x );

    if True = u.E_Width then begin
        XML_data2 			:= XML_rs.AddChild( tbl1[x] );
        XML_data2.NodeValue := u.F_Width;
    end;

    Inc( x );

    if True = u.E_Top then begin
        XML_data2 			:= XML_rs.AddChild( tbl1[x] );
        XML_data2.NodeValue := u.F_Top;
    end;

    Inc( x );

    if True = u.E_Height then begin
        XML_data2 			:= XML_rs.AddChild( tbl1[x] );
        XML_data2.NodeValue := u.F_Height;
    end;

    Inc( x );

    if True = u.E_BorderWidth then begin
        XML_data2 			:= XML_rs.AddChild( tbl1[x] );
        XML_data2.NodeValue := u.F_BorderWidth;
    end;

    Inc( x );

    if True = u.E_IncludeHeadbar then begin
        XML_data2 			:= XML_rs.AddChild( tbl1[x] );
        XML_data2.NodeValue := u.F_IncludeHeadbar;
    end;

    Inc( x );

    if True = u.E_HeadbarColor then begin
        XML_data2 			:= XML_rs.AddChild( tbl1[x] );
        XML_data2.NodeValue := u.F_HeadbarColor;
    end;

    Inc( x );

    if True = u.E_HeadbarHeight then begin
        XML_data2 			:= XML_rs.AddChild( tbl1[x] );
        XML_data2.NodeValue := u.F_HeadbarHeight;
    end;

    Inc( x );

    if True = u.E_HeadbarText then begin
        XML_data2 			:= XML_rs.AddChild( tbl1[x] );
        XML_data2.NodeValue := u.F_HeadbarText;
    end;

    Inc( x );

    if True = u.E_HeadbarFontSize then begin
        XML_data2 			:= XML_rs.AddChild( tbl1[x] );
        XML_data2.NodeValue := u.F_HeadbarFontSize;
    end;

    Inc( x );

    if True = u.E_IsPermissionHandled then begin
        XML_data2 			:= XML_rs.AddChild( tbl1[x] );
        XML_data2.NodeValue := u.F_IsPermissionHandled;
    end;

    Inc( x );

    if True = u.E_IsSelectionCancel then begin
        XML_data2 			:= XML_rs.AddChild( tbl1[x] );
        XML_data2.NodeValue := u.F_IsSelectionCancel;
    end;

    Inc( x );

    if True = u.E_IsDisabled then begin
        XML_data2 			:= XML_rs.AddChild( tbl1[x] );
        XML_data2.NodeValue := u.F_IsDisabled;
    end;

    Inc( x );

    if True = u.E_IsListItem then begin
        XML_data2 			:= XML_rs.AddChild( tbl1[x] );
        XML_data2.NodeValue := u.F_IsListItem;
    end;

    Inc( x );

    if True = u.E_FontSize then begin
        XML_data2 			:= XML_rs.AddChild( tbl1[x] );
        XML_data2.NodeValue := u.F_FontSize;
    end;

end;


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
const
    tbl2 : array [0..16] of string = (
        'F_Id',
        'F_FrameId',
        'F_ListType',

        'F_Attributes',

        'F_DefaultSortColumnName',
        'F_AllowMultiSort',
        'F_FilterButtonWidth',
        'F_RowHeight',
        'F_RowHeaderColumnName',

        'F_RowHeaderClickAction',

        'F_ColumnFontSize',
        'F_CellFontSize',
        'F_Order',
        'F_Left',
        'F_Width',
        'F_Top',
        'F_Height'
    );

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function TScreenList.UiListLoad( cnl : IXMLNodeList ) : TUiList;
var
    j : integer;
    str, txt : string;
    u : TUiList;

begin

    u := TUiList.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        case AnsiIndexStr( str, tbl2 ) of
        0:
            begin
                u.F_Id    := StrToIntDef( txt, -1 );
                u.E_Id    := True;
            end;

        1:
            begin
                u.F_FrameId            := txt;
                u.E_FrameId            := True;
            end;

        2:
            begin
                u.F_ListType        := txt;
                u.E_ListType        := True;
            end;

        3:
            begin
                u.F_Attributes        := txt;
                u.E_Attributes        := True;
            end;

        4:
            begin
                u.F_DefaultSortColumnName     := txt;
                u.E_DefaultSortColumnName     := True;
            end;

        5:
            begin
                u.F_AllowMultiSort   := txt;
                u.E_AllowMultiSort   := True;
            end;

        6:
            begin
                u.F_FilterButtonWidth     := txt;
                u.E_FilterButtonWidth     := True;
            end;

        7:
            begin
                u.F_RowHeight          := txt;
                u.E_RowHeight          := True;
            end;

        8:
            begin
                u.F_RowHeaderColumnName          := txt;
                u.E_RowHeaderColumnName          := True;
            end;

        9:
            begin
                u.F_RowHeaderClickAction          := txt;
                u.E_RowHeaderClickAction          := True;
            end;

        10:
            begin
                u.F_ColumnFontSize          := txt;
                u.E_ColumnFontSize          := True;
            end;

        11:
            begin
                u.F_CellFontSize          := txt;
                u.E_CellFontSize          := True;
            end;

        12:
            begin
                u.F_Order         := txt;
                u.E_Order         := True;
            end;

        13:
            begin
                u.F_Left          := txt;
                u.E_Left          := True;
            end;

        14:
            begin
                u.F_Width         := txt;
                u.E_Width         := True;
            end;

        15:
            begin
                u.F_Top           := txt;
                u.E_Top           := True;
            end;

        16:
            begin
                u.F_Height        := txt;
                u.E_Height        := True;
            end;

        else
            beep;

        end;
    end;

    Result := u;
end;


//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
procedure TScreenList.UiListSave( XML_Doc : IXMLDocument; u : TUiList );
var
	XML_rs    	: IXMLNode;
	XML_data2   : IXMLNode;
    x : integer;

begin

    XML_rs := XML_Doc.DocumentElement.AddChild( 'UiList' );

    x := 0;

    if True = u.E_Id then begin
        XML_data2 			:= XML_rs.AddChild( tbl2[x] );
        XML_data2.NodeValue := u.F_Id;
    end;

    Inc( x );

    if True = u.E_FrameId then begin
        XML_data2 			:= XML_rs.AddChild( tbl2[x] );
        XML_data2.NodeValue := u.F_FrameId;
    end;

    Inc( x );

    if True = u.E_ListType then begin
        XML_data2 			:= XML_rs.AddChild( tbl2[x] );
        XML_data2.NodeValue := u.F_ListType;
    end;

    Inc( x );

    if True = u.E_Attributes then begin
        XML_data2 			:= XML_rs.AddChild( tbl2[x] );
        XML_data2.NodeValue := u.F_Attributes;
    end;

    Inc( x );

    if True = u.E_DefaultSortColumnName then begin
        XML_data2 			:= XML_rs.AddChild( tbl2[x] );
        XML_data2.NodeValue := u.F_DefaultSortColumnName;
    end;

    Inc( x );

    if True = u.E_AllowMultiSort then begin
        XML_data2 			:= XML_rs.AddChild( tbl2[x] );
        XML_data2.NodeValue := u.F_AllowMultiSort;
    end;

    Inc( x );

    if True = u.E_FilterButtonWidth then begin
        XML_data2 			:= XML_rs.AddChild( tbl2[x] );
        XML_data2.NodeValue := u.F_FilterButtonWidth;
    end;

    Inc( x );

    if True = u.E_RowHeight then begin
        XML_data2 			:= XML_rs.AddChild( tbl2[x] );
        XML_data2.NodeValue := u.F_RowHeight;
    end;

    Inc( x );

    if True = u.E_RowHeaderColumnName then begin
        XML_data2 			:= XML_rs.AddChild( tbl2[x] );
        XML_data2.NodeValue := u.F_RowHeaderColumnName;
    end;

    Inc( x );

    if True = u.E_RowHeaderClickAction then begin
        XML_data2 			:= XML_rs.AddChild( tbl2[x] );
        XML_data2.NodeValue := u.F_RowHeaderClickAction;
    end;

    Inc( x );

    if True = u.E_ColumnFontSize then begin
        XML_data2 			:= XML_rs.AddChild( tbl2[x] );
        XML_data2.NodeValue := u.F_ColumnFontSize;
    end;

    Inc( x );

    if True = u.E_CellFontSize then begin
        XML_data2 			:= XML_rs.AddChild( tbl2[x] );
        XML_data2.NodeValue := u.F_CellFontSize;
    end;

    Inc( x );

    if True = u.E_Order then begin
        XML_data2 			:= XML_rs.AddChild( tbl2[x] );
        XML_data2.NodeValue := u.F_Order;
    end;

    Inc( x );

    if True = u.E_Left then begin
        XML_data2 			:= XML_rs.AddChild( tbl2[x] );
        XML_data2.NodeValue := u.F_Left;
    end;

    Inc( x );

    if True = u.E_Width then begin
        XML_data2 			:= XML_rs.AddChild( tbl2[x] );
        XML_data2.NodeValue := u.F_Width;
    end;

    Inc( x );

    if True = u.E_Top then begin
        XML_data2 			:= XML_rs.AddChild( tbl2[x] );
        XML_data2.NodeValue := u.F_Top;
    end;

    Inc( x );

    if True = u.E_Height then begin
        XML_data2 			:= XML_rs.AddChild( tbl2[x] );
        XML_data2.NodeValue := u.F_Height;
    end;


end;



//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
const
    tbl3 : array [0..30] of string = (
        'F_Id',
        'F_ListId',
        'F_Order',
        'F_SortOrder',

        'F_Width',
        'F_IsVisible',
        'F_IsReadOnly',
        'F_Text',
        'F_ColName',
        'F_ColAlias',

        'F_ColHeaderClickAction',
        'F_CellType',
        'F_EnumTypeName',

        'F_Format',
        'F_Attribute',


        'F_AllowSort',
        'F_AllowFilter',
        'F_AllowWideChar',
        'F_MaxLangth',
        'F_MaxLengthIsBytes',

        'F_DisplayMaxLineCount',

        'F_ColumnFontSize',
        'F_CellFontSize',

        'F_CellTextHAlign',


        'F_CanReEntry',
        'F_IsCellButtonCol',
        'F_IsRowSelectSync',
        'F_BoolTrueText',
        'F_BoolFalseText',
        'F_IsFontSizeAdjustable',

        'F_FooterText'


    );

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function TScreenList.UiListColumnLoad( cnl : IXMLNodeList ) : TUiListColumn;
var
    j : integer;
    str, txt : string;
    u : TUiListColumn;

begin

    u := TUiListColumn.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        case AnsiIndexStr( str, tbl3 ) of
        0:
            begin
                u.F_Id    := StrToIntDef( txt, -1 );
                u.E_Id    := True;
            end;

        1:
            begin
                u.F_ListId            := txt;
                u.E_ListId            := True;
            end;

        2:
            begin
                u.F_Order        := txt;
                u.E_Order        := True;
            end;

        3:
            begin
                u.F_SortOrder        := txt;
                u.E_SortOrder        := True;
            end;

        4:
            begin
                u.F_Width        := txt;
                u.E_Width        := True;
            end;

        5:
            begin
                u.F_IsVisible     := txt;
                u.E_IsVisible     := True;
            end;

        6:
            begin
                u.F_IsReadOnly     := txt;
                u.E_IsReadOnly     := True;
            end;

        7:
            begin
                u.F_Text   := txt;
                u.E_Text   := True;
            end;

        8:
            begin
                u.F_ColName     := txt;
                u.E_ColName     := True;
            end;

        9:
            begin
                u.F_ColAlias     := txt;
                u.E_ColAlias     := True;
            end;

        10:
            begin
                u.F_ColHeaderClickAction          := txt;
                u.E_ColHeaderClickAction          := True;
            end;

        11:
            begin
                u.F_CellType          := txt;
                u.E_CellType          := True;
            end;

        12:
            begin
                u.F_EnumTypeName          := txt;
                u.E_EnumTypeName          := True;
            end;

        13:
            begin
                u.F_Format          := txt;
                u.E_Format          := True;
            end;

        14:
            begin
                u.F_Attribute          := txt;
                u.E_Attribute          := True;
            end;


        15:
            begin
                u.F_AllowSort          := txt;
                u.E_AllowSort          := True;
            end;

        16:
            begin
                u.F_AllowFilter          := txt;
                u.E_AllowFilter          := True;
            end;

        17:
            begin
                u.F_AllowWideChar          := txt;
                u.E_AllowWideChar          := True;
            end;

        18:
            begin
                u.F_MaxLangth         := txt;
                u.E_MaxLangth         := True;
            end;

        19:
            begin
                u.F_MaxLengthIsBytes    := txt;
                u.E_MaxLengthIsBytes    := True;
            end;

        20:
            begin
                u.F_DisplayMaxLineCount := txt;
                u.E_DisplayMaxLineCount := True;
            end;

        21:
            begin
                u.F_ColumnFontSize      := txt;
                u.E_ColumnFontSize      := True;
            end;

        22:
            begin
                u.F_CellFontSize        := txt;
                u.E_CellFontSize        := True;
            end;

        23:
            begin
                u.F_CellTextHAlign      := txt;
                u.E_CellTextHAlign      := True;
            end;

        24:
            begin
                u.F_CanReEntry          := txt;
                u.E_CanReEntry          := True;
            end;


        25:
            begin
                u.F_IsCellButtonCol     := txt;
                u.E_IsCellButtonCol     := True;
            end;

        26:
            begin
                u.F_IsRowSelectSync     := txt;
                u.E_IsRowSelectSync     := True;
            end;

        27:
            begin
                u.F_BoolTrueText        := txt;
                u.E_BoolTrueText        := True;
            end;

        28:
            begin
                u.F_BoolFalseText       := txt;
                u.E_BoolFalseText       := True;
            end;

        29:
            begin
                u.F_IsFontSizeAdjustable        := txt;
                u.E_IsFontSizeAdjustable        := True;
            end;

        30:
            begin
                u.F_FooterText          := txt;
                u.E_FooterText          := True;
            end;

        else
            beep;

        end;
    end;

    Result := u;
end;


//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
procedure TScreenList.UiListColumnSave( XML_Doc : IXMLDocument; u : TUiListColumn );
var
	XML_rs    	: IXMLNode;
	XML_data2   : IXMLNode;
    x : integer;

begin

    XML_rs := XML_Doc.DocumentElement.AddChild( 'UiListColumn' );

    x := 0;

    if True = u.E_Id then begin
        XML_data2 			:= XML_rs.AddChild( tbl3[x] );
        XML_data2.NodeValue := u.F_Id;
    end;

    Inc( x );

    if True = u.E_ListId then begin
        XML_data2 			:= XML_rs.AddChild( tbl3[x] );
        XML_data2.NodeValue := u.F_ListId;
    end;

    Inc( x );

    if True = u.E_Order then begin
        XML_data2 			:= XML_rs.AddChild( tbl3[x] );
        XML_data2.NodeValue := u.F_Order;
    end;

    Inc( x );

    if True = u.E_SortOrder then begin
        XML_data2 			:= XML_rs.AddChild( tbl3[x] );
        XML_data2.NodeValue := u.F_SortOrder;
    end;

    Inc( x );

    if True = u.E_Width then begin
        XML_data2 			:= XML_rs.AddChild( tbl3[x] );
        XML_data2.NodeValue := u.F_Width;
    end;

    Inc( x );

    if True = u.E_IsVisible then begin
        XML_data2 			:= XML_rs.AddChild( tbl3[x] );
        XML_data2.NodeValue := u.F_IsVisible;
    end;

    Inc( x );

    if True = u.E_IsReadOnly then begin
        XML_data2 			:= XML_rs.AddChild( tbl3[x] );
        XML_data2.NodeValue := u.F_IsReadOnly;
    end;

    Inc( x );

    if True = u.E_Text then begin
        XML_data2 			:= XML_rs.AddChild( tbl3[x] );
        XML_data2.NodeValue := u.F_Text;
    end;

    Inc( x );

    if True = u.E_ColName then begin
        XML_data2 			:= XML_rs.AddChild( tbl3[x] );
        XML_data2.NodeValue := u.F_ColName;
    end;

    Inc( x );

    if True = u.E_ColAlias then begin
        XML_data2 			:= XML_rs.AddChild( tbl3[x] );
        XML_data2.NodeValue := u.F_ColAlias;
    end;

    Inc( x );

    if True = u.E_ColHeaderClickAction then begin
        XML_data2 			:= XML_rs.AddChild( tbl3[x] );
        XML_data2.NodeValue := u.F_ColHeaderClickAction;
    end;

    Inc( x );

    if True = u.E_CellType then begin
        XML_data2 			:= XML_rs.AddChild( tbl3[x] );
        XML_data2.NodeValue := u.F_CellType;
    end;

    Inc( x );

    if True = u.E_EnumTypeName then begin
        XML_data2 			:= XML_rs.AddChild( tbl3[x] );
        XML_data2.NodeValue := u.F_EnumTypeName;
    end;

    Inc( x );

    if True = u.E_Format then begin
        XML_data2 			:= XML_rs.AddChild( tbl3[x] );
        XML_data2.NodeValue := u.F_Format;
    end;

    Inc( x );

    if True = u.E_Attribute then begin
        XML_data2 			:= XML_rs.AddChild( tbl3[x] );
        XML_data2.NodeValue := u.F_Attribute;
    end;

    Inc( x );

    if True = u.E_AllowSort then begin
        XML_data2 			:= XML_rs.AddChild( tbl3[x] );
        XML_data2.NodeValue := u.F_AllowSort;
    end;

    Inc( x );

    if True = u.E_AllowFilter then begin
        XML_data2 			:= XML_rs.AddChild( tbl3[x] );
        XML_data2.NodeValue := u.F_AllowFilter;
    end;

    Inc( x );

    if True = u.E_AllowWideChar then begin
        XML_data2 			:= XML_rs.AddChild( tbl3[x] );
        XML_data2.NodeValue := u.F_AllowWideChar;
    end;

    Inc( x );

    if True = u.E_MaxLangth then begin
        XML_data2 			:= XML_rs.AddChild( tbl3[x] );
        XML_data2.NodeValue := u.F_MaxLangth;
    end;

    Inc( x );

    if True = u.E_MaxLengthIsBytes then begin
        XML_data2 			:= XML_rs.AddChild( tbl3[x] );
        XML_data2.NodeValue := u.F_MaxLengthIsBytes;
    end;

    Inc( x );

    if True = u.E_DisplayMaxLineCount then begin
        XML_data2 			:= XML_rs.AddChild( tbl3[x] );
        XML_data2.NodeValue := u.F_DisplayMaxLineCount;
    end;

    Inc( x );

    if True = u.E_ColumnFontSize then begin
        XML_data2 			:= XML_rs.AddChild( tbl3[x] );
        XML_data2.NodeValue := u.F_ColumnFontSize;
    end;

    Inc( x );

    if True = u.E_CellFontSize then begin
        XML_data2 			:= XML_rs.AddChild( tbl3[x] );
        XML_data2.NodeValue := u.F_CellFontSize;
    end;

    Inc( x );

    if True = u.E_CellTextHAlign then begin
        XML_data2 			:= XML_rs.AddChild( tbl3[x] );
        XML_data2.NodeValue := u.F_CellTextHAlign;
    end;

    Inc( x );

    if True = u.E_CanReEntry then begin
        XML_data2 			:= XML_rs.AddChild( tbl3[x] );
        XML_data2.NodeValue := u.F_CanReEntry;
    end;

    Inc( x );

    if True = u.E_IsCellButtonCol then begin
        XML_data2 			:= XML_rs.AddChild( tbl3[x] );
        XML_data2.NodeValue := u.F_IsCellButtonCol;
    end;

    Inc( x );

    if True = u.E_IsRowSelectSync then begin
        XML_data2 			:= XML_rs.AddChild( tbl3[x] );
        XML_data2.NodeValue := u.F_IsRowSelectSync;
    end;

    Inc( x );

    if True = u.E_BoolTrueText then begin
        XML_data2 			:= XML_rs.AddChild( tbl3[x] );
        XML_data2.NodeValue := u.F_BoolTrueText;
    end;

    Inc( x );

    if True = u.E_BoolFalseText then begin
        XML_data2 			:= XML_rs.AddChild( tbl3[x] );
        XML_data2.NodeValue := u.F_BoolFalseText;
    end;

    Inc( x );

    if True = u.E_IsFontSizeAdjustable then begin
        XML_data2 			:= XML_rs.AddChild( tbl3[x] );
        XML_data2.NodeValue := u.F_IsFontSizeAdjustable;
    end;

    Inc( x );

    if True = u.E_FooterText then begin
        XML_data2 			:= XML_rs.AddChild( tbl3[x] );
        XML_data2.NodeValue := u.F_FooterText;
    end;

end;



//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
const
    tbl4 : array [0..11] of string = (
        'F_Id',
        'F_FrameId',
        'F_Text',
        'F_UiType',
        'F_Name',
        'F_Attributes',
        'F_Order',
        'F_Left',
        'F_Width',
        'F_Top',
        'F_Height',
        'F_BorderWidth'
    );

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function TScreenList.UiContentLoad( cnl : IXMLNodeList ) : TUiContent;
var
    j : integer;
    str, txt : string;
    u : TUiContent;

begin

    u := TUiContent.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        case AnsiIndexStr( str, tbl4 ) of
        0:
            begin
                u.F_Id    := StrToIntDef( txt, -1 );
                u.E_Id    := True;
            end;

        1:
            begin
                u.F_FrameId            := txt;
                u.E_FrameId            := True;
            end;

        2:
            begin
                u.F_Text        := txt;
                u.E_Text        := True;
            end;

        3:
            begin
                u.F_UiType        := txt;
                u.E_UiType        := True;
            end;

        4:
            begin
                u.F_Name        := txt;
                u.E_Name        := True;
            end;

        5:
            begin
                u.F_Attributes        := txt;
                u.E_Attributes        := True;
            end;

        6:
            begin
                u.F_Order        := txt;
                u.E_Order        := True;
            end;

        7:
            begin
                u.F_Left     := txt;
                u.E_Left     := True;
            end;

        8:
            begin
                u.F_Width     := txt;
                u.E_Width     := True;
            end;

        9:
            begin
                u.F_Top   := txt;
                u.E_Top   := True;
            end;

        10:
            begin
                u.F_Height     := txt;
                u.E_Height     := True;
            end;

        11:
            begin
                u.F_BorderWidth     := txt;
                u.E_BorderWidth     := True;
            end;

        else
            beep;

        end;
    end;

    Result := u;
end;

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
procedure TScreenList.UiContentSave( XML_Doc : IXMLDocument; u : TUiContent );
var
	XML_rs    	: IXMLNode;
	XML_data2   : IXMLNode;
    x : integer;

begin

    XML_rs := XML_Doc.DocumentElement.AddChild( 'UiContent' );

    x := 0;

    if True = u.E_Id then begin
        XML_data2 			:= XML_rs.AddChild( tbl4[x] );
        XML_data2.NodeValue := u.F_Id;
    end;

    Inc( x );

    if True = u.E_FrameId then begin
        XML_data2 			:= XML_rs.AddChild( tbl4[x] );
        XML_data2.NodeValue := u.F_FrameId;
    end;

    Inc( x );

    if True = u.E_Text then begin
        XML_data2 			:= XML_rs.AddChild( tbl4[x] );
        XML_data2.NodeValue := u.F_Text;
    end;

    Inc( x );

    if True = u.E_UiType then begin
        XML_data2 			:= XML_rs.AddChild( tbl4[x] );
        XML_data2.NodeValue := u.F_UiType;
    end;

    Inc( x );

    if True = u.E_Name then begin
        XML_data2 			:= XML_rs.AddChild( tbl4[x] );
        XML_data2.NodeValue := u.F_Name;
    end;

    Inc( x );

    if True = u.E_Attributes then begin
        XML_data2 			:= XML_rs.AddChild( tbl4[x] );
        XML_data2.NodeValue := u.F_Attributes;
    end;

    Inc( x );

    if True = u.E_Order then begin
        XML_data2 			:= XML_rs.AddChild( tbl4[x] );
        XML_data2.NodeValue := u.F_Order;
    end;

    Inc( x );

    if True = u.E_Left then begin
        XML_data2 			:= XML_rs.AddChild( tbl4[x] );
        XML_data2.NodeValue := u.F_Left;
    end;

    Inc( x );

    if True = u.E_Width then begin
        XML_data2 			:= XML_rs.AddChild( tbl4[x] );
        XML_data2.NodeValue := u.F_Width;
    end;

    Inc( x );

    if True = u.E_Top then begin
        XML_data2 			:= XML_rs.AddChild( tbl4[x] );
        XML_data2.NodeValue := u.F_Top;
    end;

    Inc( x );

    if True = u.E_Height then begin
        XML_data2 			:= XML_rs.AddChild( tbl4[x] );
        XML_data2.NodeValue := u.F_Height;
    end;

    Inc( x );

    if True = u.E_BorderWidth then begin
        XML_data2 			:= XML_rs.AddChild( tbl4[x] );
        XML_data2.NodeValue := u.F_BorderWidth;
    end;


end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
const
    tbl5 : array [0..10] of string = (
        'F_Id',
        'F_ColumnId',
        'F_Order',
        'F_Width',
        'F_Text',
        'F_ClickAction',
        'F_IsDefaultRowVisible',
        'F_IsStandartRowVisible',
        'F_FontSize',
        'F_IsRowSelectSync',

        'F_HeadbarHeight'

    );

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function TScreenList.UiListCellButtonLoad( cnl : IXMLNodeList ) : TUiListCellButton;
var
    j : integer;
    str, txt : string;
    u : TUiListCellButton;

begin

    u := TUiListCellButton.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        case AnsiIndexStr( str, tbl5 ) of
        0:
            begin
                u.F_Id    := StrToIntDef( txt, -1 );
                u.E_Id    := True;
            end;

        1:
            begin
                u.F_ColumnId            := txt;
                u.E_ColumnId            := True;
            end;

        2:
            begin
                u.F_Order        := txt;
                u.E_Order        := True;
            end;

        3:
            begin
                u.F_Width        := txt;
                u.E_Width        := True;
            end;

        4:
            begin
                u.F_Text        := txt;
                u.E_Text        := True;
            end;

        5:
            begin
                u.F_ClickAction        := txt;
                u.E_ClickAction        := True;
            end;

        6:
            begin
                u.F_IsDefaultRowVisible        := txt;
                u.E_IsDefaultRowVisible        := True;
            end;

        7:
            begin
                u.F_IsStandartRowVisible     := txt;
                u.E_IsStandartRowVisible     := True;
            end;

        8:
            begin
                u.F_FontSize            := txt;
                u.E_FontSize            := True;
            end;

        9:
            begin
                u.F_IsRowSelectSync     := txt;
                u.E_IsRowSelectSync     := True;
            end;

        10:
            begin
                u.F_HeadbarHeight       := txt;
                u.E_HeadbarHeight       := True;
            end;

        else
            beep;

        end;
    end;

    Result := u;
end;

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
procedure TScreenList.UiListCellButtonSave( XML_Doc : IXMLDocument; u : TUiListCellButton );
var
	XML_rs    	: IXMLNode;
	XML_data2   : IXMLNode;
    x : integer;

begin

    XML_rs := XML_Doc.DocumentElement.AddChild( 'UiListCellButton' );

    x := 0;

    if True = u.E_Id then begin
        XML_data2 			:= XML_rs.AddChild( tbl5[x] );
        XML_data2.NodeValue := u.F_Id;
    end;

    Inc( x );

    if True = u.E_ColumnId then begin
        XML_data2 			:= XML_rs.AddChild( tbl5[x] );
        XML_data2.NodeValue := u.F_ColumnId;
    end;

    Inc( x );

    if True = u.E_Order then begin
        XML_data2 			:= XML_rs.AddChild( tbl5[x] );
        XML_data2.NodeValue := u.F_Order;
    end;

    Inc( x );

    if True = u.E_Width then begin
        XML_data2 			:= XML_rs.AddChild( tbl5[x] );
        XML_data2.NodeValue := u.F_Width;
    end;

    Inc( x );

    if True = u.E_Text then begin
        XML_data2 			:= XML_rs.AddChild( tbl5[x] );
        XML_data2.NodeValue := u.F_Text;
    end;

    Inc( x );

    if True = u.E_ClickAction then begin
        XML_data2 			:= XML_rs.AddChild( tbl5[x] );
        XML_data2.NodeValue := u.F_ClickAction;
    end;

    Inc( x );

    if True = u.E_IsDefaultRowVisible then begin
        XML_data2 			:= XML_rs.AddChild( tbl5[x] );
        XML_data2.NodeValue := u.F_IsDefaultRowVisible;
    end;

    Inc( x );

    if True = u.E_IsStandartRowVisible then begin
        XML_data2 			:= XML_rs.AddChild( tbl5[x] );
        XML_data2.NodeValue := u.F_IsStandartRowVisible;
    end;

    Inc( x );

    if True = u.E_FontSize then begin
        XML_data2 			:= XML_rs.AddChild( tbl5[x] );
        XML_data2.NodeValue := u.F_FontSize;
    end;

    Inc( x );

    if True = u.E_IsRowSelectSync then begin
        XML_data2 			:= XML_rs.AddChild( tbl5[x] );
        XML_data2.NodeValue := u.F_IsRowSelectSync;
    end;

    Inc( x );

    if True = u.E_HeadbarHeight then begin
        XML_data2 			:= XML_rs.AddChild( tbl5[x] );
        XML_data2.NodeValue := u.F_HeadbarHeight;
    end;

end;


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
const
    tbl6 : array [0..16] of string = (
        'F_Id',
        'F_FrameId',
        'F_DstPortNo',
        'F_IsListItem',
        'F_DstHeightPx',
        'F_FontSize',
        'F_Order',
        'F_Left',
        'F_Width',
        'F_Top',
        'F_Height',
        'F_BorderWidth',
        'F_IsDisabled',
        'F_SystemModeBitMask',

        'F_Attrubute',
        'F_IsHeadBarHidden',

        'F_DstFontSize'

    );

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function TScreenList.UiDstButtonLoad( cnl : IXMLNodeList ) : TUiDstButton;
var
    j : integer;
    str, txt : string;
    u : TUiDstButton;

begin

    u := TUiDstButton.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        case AnsiIndexStr( str, tbl6 ) of
        0:
            begin
                u.F_Id    := StrToIntDef( txt, -1 );
                u.E_Id    := True;
            end;

        1:
            begin
                u.F_FrameId            := txt;
                u.E_FrameId            := True;
            end;

        2:
            begin
                u.F_DstPortNo            := txt;
                u.E_DstPortNo            := True;
            end;

        3:
            begin
                u.F_IsListItem            := txt;
                u.E_IsListItem            := True;
            end;

        4:
            begin
                u.F_DstHeightPx            := txt;
                u.E_DstHeightPx            := True;
            end;

        5:
            begin
                u.F_FontSize            := txt;
                u.E_FontSize            := True;
            end;

        6:
            begin
                u.F_Order        := txt;
                u.E_Order        := True;
            end;

        7:
            begin
                u.F_Left        := txt;
                u.E_Left        := True;
            end;

        8:
            begin
                u.F_Width        := txt;
                u.E_Width        := True;
            end;

        9:
            begin
                u.F_Top        := txt;
                u.E_Top        := True;
            end;

        10:
            begin
                u.F_Height        := txt;
                u.E_Height        := True;
            end;

        11:
            begin
                u.F_BorderWidth         := txt;
                u.E_BorderWidth         := True;
            end;

        12:
            begin
                u.F_IsDisabled          := txt;
                u.E_IsDisabled          := True;
            end;

        13:
            begin
                u.F_SystemModeBitMask   := txt;
                u.E_SystemModeBitMask   := True;
            end;

        14:
            begin
                u.F_Attrubute           := txt;
                u.E_Attrubute           := True;
            end;

        15:
            begin
                u.F_IsHeadBarHidden     := txt;
                u.E_IsHeadBarHidden     := True;
            end;

        16:
            begin
                u.F_DstFontSize         := txt;
                u.E_DstFontSize         := True;
            end;

        else
            beep;

        end;
    end;

    Result := u;
end;

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
procedure TScreenList.UiDstButtonSave( XML_Doc : IXMLDocument; u : TUiDstButton );
var
	XML_rs    	: IXMLNode;
	XML_data2   : IXMLNode;
    x : integer;

begin

    XML_rs := XML_Doc.DocumentElement.AddChild( 'UiDstButton' );

    x := 0;

    if True = u.E_Id then begin
        XML_data2 			:= XML_rs.AddChild( tbl6[x] );
        XML_data2.NodeValue := u.F_Id;
    end;

    Inc( x );

    if True = u.E_FrameId then begin
        XML_data2 			:= XML_rs.AddChild( tbl6[x] );
        XML_data2.NodeValue := u.F_FrameId;
    end;

    Inc( x );

    if True = u.E_DstPortNo then begin
        XML_data2 			:= XML_rs.AddChild( tbl6[x] );
        XML_data2.NodeValue := u.F_DstPortNo;
    end;

    Inc( x );

    if True = u.E_IsListItem then begin
        XML_data2 			:= XML_rs.AddChild( tbl6[x] );
        XML_data2.NodeValue := u.F_IsListItem;
    end;

    Inc( x );

    if True = u.E_DstHeightPx then begin
        XML_data2 			:= XML_rs.AddChild( tbl6[x] );
        XML_data2.NodeValue := u.F_DstHeightPx;
    end;

    Inc( x );

    if True = u.E_FontSize then begin
        XML_data2 			:= XML_rs.AddChild( tbl6[x] );
        XML_data2.NodeValue := u.F_FontSize;
    end;

    Inc( x );

    if True = u.E_Order then begin
        XML_data2 			:= XML_rs.AddChild( tbl6[x] );
        XML_data2.NodeValue := u.F_Order;
    end;

    Inc( x );

    if True = u.E_Left then begin
        XML_data2 			:= XML_rs.AddChild( tbl6[x] );
        XML_data2.NodeValue := u.F_Left;
    end;

    Inc( x );

    if True = u.E_Width then begin
        XML_data2 			:= XML_rs.AddChild( tbl6[x] );
        XML_data2.NodeValue := u.F_Width;
    end;

    Inc( x );

    if True = u.E_Top then begin
        XML_data2 			:= XML_rs.AddChild( tbl6[x] );
        XML_data2.NodeValue := u.F_Top;
    end;

    Inc( x );

    if True = u.E_Height then begin
        XML_data2 			:= XML_rs.AddChild( tbl6[x] );
        XML_data2.NodeValue := u.F_Height;
    end;

    Inc( x );

    if True = u.E_BorderWidth then begin
        XML_data2 			:= XML_rs.AddChild( tbl6[x] );
        XML_data2.NodeValue := u.F_BorderWidth;
    end;

    Inc( x );

    if True = u.E_IsDisabled then begin
        XML_data2 			:= XML_rs.AddChild( tbl6[x] );
        XML_data2.NodeValue := u.F_IsDisabled;
    end;

    Inc( x );

    if True = u.E_SystemModeBitMask then begin
        XML_data2 			:= XML_rs.AddChild( tbl6[x] );
        XML_data2.NodeValue := u.F_SystemModeBitMask;
    end;

    Inc( x );

    if True = u.E_Attrubute then begin
        XML_data2 			:= XML_rs.AddChild( tbl6[x] );
        XML_data2.NodeValue := u.F_Attrubute;
    end;

    Inc( x );

    if True = u.E_IsHeadBarHidden then begin
        XML_data2 			:= XML_rs.AddChild( tbl6[x] );
        XML_data2.NodeValue := u.F_IsHeadBarHidden;
    end;

    Inc( x );

    if True = u.E_DstFontSize then begin
        XML_data2 			:= XML_rs.AddChild( tbl6[x] );
        XML_data2.NodeValue := u.F_DstFontSize;
    end;

end;


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
const
    tbl7 : array [0..10] of string = (
        'F_Id',
        'F_FrameId',
        'F_SrcPortNo',
        'F_Order',
        'F_Left',
        'F_Width',
        'F_Top',
        'F_Height',
        'F_SystemModeBitMask',

        'F_FontSize',
        'F_Attribute'
    );

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function TScreenList.UiSrcButtonLoad( cnl : IXMLNodeList ) : TUiSrcButton;
var
    j : integer;
    str, txt : string;
    u : TUiSrcButton;

begin

    u := TUiSrcButton.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        case AnsiIndexStr( str, tbl7 ) of
        0:
            begin
                u.F_Id    := StrToIntDef( txt, -1 );
                u.E_Id    := True;
            end;

        1:
            begin
                u.F_FrameId            := txt;
                u.E_FrameId            := True;
            end;

        2:
            begin
                u.F_SrcPortNo            := txt;
                u.E_SrcPortNo            := True;
            end;

        3:
            begin
                u.F_Order        := txt;
                u.E_Order        := True;
            end;

        4:
            begin
                u.F_Left        := txt;
                u.E_Left        := True;
            end;

        5:
            begin
                u.F_Width        := txt;
                u.E_Width        := True;
            end;

        6:
            begin
                u.F_Top        := txt;
                u.E_Top        := True;
            end;

        7:
            begin
                u.F_Height        := txt;
                u.E_Height        := True;
            end;

        8:
            begin
                u.F_SystemModeBitMask        := txt;
                u.E_SystemModeBitMask        := True;
            end;

        9:
            begin
                u.F_FontSize        := txt;
                u.E_FontSize        := True;
            end;

        10:
            begin
                u.F_Attribute        := txt;
                u.E_Attribute        := True;
            end;

        else
            beep;

        end;
    end;

    Result := u;
end;

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
procedure TScreenList.UiSrcButtonSave( XML_Doc : IXMLDocument; u : TUiSrcButton );
var
	XML_rs    	: IXMLNode;
	XML_data2   : IXMLNode;
    x : integer;

begin

    XML_rs := XML_Doc.DocumentElement.AddChild( 'UiSrcButton' );

    x := 0;

    if True = u.E_Id then begin
        XML_data2 			:= XML_rs.AddChild( tbl7[x] );
        XML_data2.NodeValue := u.F_Id;
    end;

    Inc( x );

    if True = u.E_FrameId then begin
        XML_data2 			:= XML_rs.AddChild( tbl7[x] );
        XML_data2.NodeValue := u.F_FrameId;
    end;

    Inc( x );

    if True = u.E_SrcPortNo then begin
        XML_data2 			:= XML_rs.AddChild( tbl7[x] );
        XML_data2.NodeValue := u.F_SrcPortNo;
    end;

    Inc( x );

    if True = u.E_Order then begin
        XML_data2 			:= XML_rs.AddChild( tbl7[x] );
        XML_data2.NodeValue := u.F_Order;
    end;

    Inc( x );

    if True = u.E_Left then begin
        XML_data2 			:= XML_rs.AddChild( tbl7[x] );
        XML_data2.NodeValue := u.F_Left;
    end;

    Inc( x );

    if True = u.E_Width then begin
        XML_data2 			:= XML_rs.AddChild( tbl7[x] );
        XML_data2.NodeValue := u.F_Width;
    end;

    Inc( x );

    if True = u.E_Top then begin
        XML_data2 			:= XML_rs.AddChild( tbl7[x] );
        XML_data2.NodeValue := u.F_Top;
    end;

    Inc( x );

    if True = u.E_Height then begin
        XML_data2 			:= XML_rs.AddChild( tbl7[x] );
        XML_data2.NodeValue := u.F_Height;
    end;

    Inc( x );

    if True = u.E_SystemModeBitMask then begin
        XML_data2 			:= XML_rs.AddChild( tbl7[x] );
        XML_data2.NodeValue := u.F_SystemModeBitMask;
    end;

    Inc( x );

    if True = u.E_FontSize then begin
        XML_data2 			:= XML_rs.AddChild( tbl7[x] );
        XML_data2.NodeValue := u.F_FontSize;
    end;

    Inc( x );

    if True = u.E_Attribute then begin
        XML_data2 			:= XML_rs.AddChild( tbl7[x] );
        XML_data2.NodeValue := u.F_Attribute;
    end;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
const
    tbl8 : array [0..12] of string = (
        'F_Id',
        'F_FrameId',
        'F_ButtonNo',
        'F_DstAssignDisable',
        'F_SrcAssignDisable',
        'F_CopyButtonNo',
        'F_SyncPageRange',
        'F_DispMode',
        'F_Order',
        'F_Left',
        'F_Width',
        'F_Top',
        'F_Height'
    );

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function TScreenList.UiPanelKeyButtonLoad( cnl : IXMLNodeList ) : TUiPanelKeyButton;
var
    j : integer;
    str, txt : string;
    u : TUiPanelKeyButton;

begin

    u := TUiPanelKeyButton.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        case AnsiIndexStr( str, tbl8 ) of
        0:
            begin
                u.F_Id    := StrToIntDef( txt, -1 );
                u.E_Id    := True;
            end;

        1:
            begin
                u.F_FrameId            := txt;
                u.E_FrameId            := True;
            end;

        2:
            begin
                u.F_ButtonNo            := txt;
                u.E_ButtonNo            := True;
            end;

        3:
            begin
                u.F_DstAssignDisable            := txt;
                u.E_DstAssignDisable            := True;
            end;

        4:
            begin
                u.F_SrcAssignDisable            := txt;
                u.E_SrcAssignDisable            := True;
            end;

        5:
            begin
                u.F_CopyButtonNo            := txt;
                u.E_CopyButtonNo            := True;
            end;

        6:
            begin
                u.F_SyncPageRange            := txt;
                u.E_SyncPageRange            := True;
            end;

        7:
            begin
                u.F_DispMode        := txt;
                u.E_DispMode        := True;
            end;

        8:
            begin
                u.F_Order        := txt;
                u.E_Order        := True;
            end;

        9:
            begin
                u.F_Left        := txt;
                u.E_Left        := True;
            end;

        10:
            begin
                u.F_Width        := txt;
                u.E_Width        := True;
            end;

        11:
            begin
                u.F_Top        := txt;
                u.E_Top        := True;
            end;

        12:
            begin
                u.F_Height        := txt;
                u.E_Height        := True;
            end;

        else
            beep;

        end;
    end;

    Result := u;
end;

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
procedure TScreenList.UiPanelKeyButtonSave( XML_Doc : IXMLDocument; u : TUiPanelKeyButton );
var
	XML_rs    	: IXMLNode;
	XML_data2   : IXMLNode;
    x : integer;

begin

    XML_rs := XML_Doc.DocumentElement.AddChild( 'UiPanelKeyButton' );

    x := 0;

    if True = u.E_Id then begin
        XML_data2 			:= XML_rs.AddChild( tbl8[x] );
        XML_data2.NodeValue := u.F_Id;
    end;

    Inc( x );

    if True = u.E_FrameId then begin
        XML_data2 			:= XML_rs.AddChild( tbl8[x] );
        XML_data2.NodeValue := u.F_FrameId;
    end;

    Inc( x );

    if True = u.E_ButtonNo then begin
        XML_data2 			:= XML_rs.AddChild( tbl8[x] );
        XML_data2.NodeValue := u.F_ButtonNo;
    end;

    Inc( x );

    if True = u.E_DstAssignDisable then begin
        XML_data2 			:= XML_rs.AddChild( tbl8[x] );
        XML_data2.NodeValue := u.F_DstAssignDisable;
    end;

    Inc( x );

    if True = u.E_SrcAssignDisable then begin
        XML_data2 			:= XML_rs.AddChild( tbl8[x] );
        XML_data2.NodeValue := u.F_SrcAssignDisable;
    end;

    Inc( x );

    if True = u.E_CopyButtonNo then begin
        XML_data2 			:= XML_rs.AddChild( tbl8[x] );
        XML_data2.NodeValue := u.F_CopyButtonNo;
    end;

    Inc( x );

    if True = u.E_SyncPageRange then begin
        XML_data2 			:= XML_rs.AddChild( tbl8[x] );
        XML_data2.NodeValue := u.F_SyncPageRange;
    end;

    Inc( x );

    if True = u.E_DispMode then begin
        XML_data2 			:= XML_rs.AddChild( tbl8[x] );
        XML_data2.NodeValue := u.F_DispMode;
    end;

    Inc( x );

    if True = u.E_Order then begin
        XML_data2 			:= XML_rs.AddChild( tbl8[x] );
        XML_data2.NodeValue := u.F_Order;
    end;

    Inc( x );

    if True = u.E_Left then begin
        XML_data2 			:= XML_rs.AddChild( tbl8[x] );
        XML_data2.NodeValue := u.F_Left;
    end;

    Inc( x );

    if True = u.E_Width then begin
        XML_data2 			:= XML_rs.AddChild( tbl8[x] );
        XML_data2.NodeValue := u.F_Width;
    end;

    Inc( x );

    if True = u.E_Top then begin
        XML_data2 			:= XML_rs.AddChild( tbl8[x] );
        XML_data2.NodeValue := u.F_Top;
    end;

    Inc( x );

    if True = u.E_Height then begin
        XML_data2 			:= XML_rs.AddChild( tbl8[x] );
        XML_data2.NodeValue := u.F_Height;
    end;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
const
    tbl9 : array [0..9] of string = (
        'F_Id',
        'F_FrameId',
        'F_DstPortNo',
        'F_Order',
        'F_Left',
        'F_Width',
        'F_Top',
        'F_Height',
        'F_BorderWidth',
        'F_SystemModeBitMask'
    );

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function TScreenList.UiPanelDstButtonLoad( cnl : IXMLNodeList ) : TUiPanelDstButton;
var
    j : integer;
    str, txt : string;
    u : TUiPanelDstButton;

begin

    u := TUiPanelDstButton.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        case AnsiIndexStr( str, tbl9 ) of
        0:
            begin
                u.F_Id    := StrToIntDef( txt, -1 );
                u.E_Id    := True;
            end;

        1:
            begin
                u.F_FrameId            := txt;
                u.E_FrameId            := True;
            end;

        2:
            begin
                u.F_DstPortNo            := txt;
                u.E_DstPortNo            := True;
            end;

        3:
            begin
                u.F_Order        := txt;
                u.E_Order        := True;
            end;

        4:
            begin
                u.F_Left        := txt;
                u.E_Left        := True;
            end;

        5:
            begin
                u.F_Width        := txt;
                u.E_Width        := True;
            end;

        6:
            begin
                u.F_Top        := txt;
                u.E_Top        := True;
            end;

        7:
            begin
                u.F_Height        := txt;
                u.E_Height        := True;
            end;

        8:
            begin
                u.F_BorderWidth        := txt;
                u.E_BorderWidth        := True;
            end;

        9:
            begin
                u.F_SystemModeBitMask        := txt;
                u.E_SystemModeBitMask        := True;
            end;

        else
            beep;

        end;
    end;

    Result := u;
end;

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
procedure TScreenList.UiPanelDstButtonSave( XML_Doc : IXMLDocument; u : TUiPanelDstButton );
var
	XML_rs    	: IXMLNode;
	XML_data2   : IXMLNode;
    x : integer;

begin

    XML_rs := XML_Doc.DocumentElement.AddChild( 'UiPanelDstButton' );

    x := 0;

    if True = u.E_Id then begin
        XML_data2 			:= XML_rs.AddChild( tbl9[x] );
        XML_data2.NodeValue := u.F_Id;
    end;

    Inc( x );

    if True = u.E_FrameId then begin
        XML_data2 			:= XML_rs.AddChild( tbl9[x] );
        XML_data2.NodeValue := u.F_FrameId;
    end;

    Inc( x );

    if True = u.E_DstPortNo then begin
        XML_data2 			:= XML_rs.AddChild( tbl9[x] );
        XML_data2.NodeValue := u.F_DstPortNo;
    end;

    Inc( x );

    if True = u.E_Order then begin
        XML_data2 			:= XML_rs.AddChild( tbl9[x] );
        XML_data2.NodeValue := u.F_Order;
    end;

    Inc( x );

    if True = u.E_Left then begin
        XML_data2 			:= XML_rs.AddChild( tbl9[x] );
        XML_data2.NodeValue := u.F_Left;
    end;

    Inc( x );

    if True = u.E_Width then begin
        XML_data2 			:= XML_rs.AddChild( tbl9[x] );
        XML_data2.NodeValue := u.F_Width;
    end;

    Inc( x );

    if True = u.E_Top then begin
        XML_data2 			:= XML_rs.AddChild( tbl9[x] );
        XML_data2.NodeValue := u.F_Top;
    end;

    Inc( x );

    if True = u.E_Height then begin
        XML_data2 			:= XML_rs.AddChild( tbl9[x] );
        XML_data2.NodeValue := u.F_Height;
    end;

    Inc( x );

    if True = u.E_BorderWidth then begin
        XML_data2 			:= XML_rs.AddChild( tbl9[x] );
        XML_data2.NodeValue := u.F_BorderWidth;
    end;

    Inc( x );

    if True = u.E_SystemModeBitMask then begin
        XML_data2 			:= XML_rs.AddChild( tbl9[x] );
        XML_data2.NodeValue := u.F_SystemModeBitMask;
    end;

end;


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
const
    tbl10 : array [0..8] of string = (
        'F_Id',
        'F_FrameId',
        'F_SrcPortNo',
        'F_Order',
        'F_Left',
        'F_Width',
        'F_Top',
        'F_Height',
        'F_SystemModeBitMask'
    );

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function TScreenList.UiPanelSrcButtonLoad( cnl : IXMLNodeList ) : TUiPanelSrcButton;
var
    j : integer;
    str, txt : string;
    u : TUiPanelSrcButton;

begin

    u := TUiPanelSrcButton.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        case AnsiIndexStr( str, tbl10 ) of
        0:
            begin
                u.F_Id    := StrToIntDef( txt, -1 );
                u.E_Id    := True;
            end;

        1:
            begin
                u.F_FrameId            := txt;
                u.E_FrameId            := True;
            end;

        2:
            begin
                u.F_SrcPortNo            := txt;
                u.E_SrcPortNo            := True;
            end;

        3:
            begin
                u.F_Order        := txt;
                u.E_Order        := True;
            end;

        4:
            begin
                u.F_Left        := txt;
                u.E_Left        := True;
            end;

        5:
            begin
                u.F_Width        := txt;
                u.E_Width        := True;
            end;

        6:
            begin
                u.F_Top        := txt;
                u.E_Top        := True;
            end;

        7:
            begin
                u.F_Height        := txt;
                u.E_Height        := True;
            end;

        8:
            begin
                u.F_SystemModeBitMask        := txt;
                u.E_SystemModeBitMask        := True;
            end;

        else
            beep;

        end;
    end;

    Result := u;
end;

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
procedure TScreenList.UiPanelSrcButtonSave( XML_Doc : IXMLDocument; u : TUiPanelSrcButton );
var
	XML_rs    	: IXMLNode;
	XML_data2   : IXMLNode;
    x : integer;

begin

    XML_rs := XML_Doc.DocumentElement.AddChild( 'UiPanelSrcButton' );

    x := 0;

    if True = u.E_Id then begin
        XML_data2 			:= XML_rs.AddChild( tbl10[x] );
        XML_data2.NodeValue := u.F_Id;
    end;

    Inc( x );

    if True = u.E_FrameId then begin
        XML_data2 			:= XML_rs.AddChild( tbl10[x] );
        XML_data2.NodeValue := u.F_FrameId;
    end;

    Inc( x );

    if True = u.E_SrcPortNo then begin
        XML_data2 			:= XML_rs.AddChild( tbl10[x] );
        XML_data2.NodeValue := u.F_SrcPortNo;
    end;

    Inc( x );

    if True = u.E_Order then begin
        XML_data2 			:= XML_rs.AddChild( tbl10[x] );
        XML_data2.NodeValue := u.F_Order;
    end;

    Inc( x );

    if True = u.E_Left then begin
        XML_data2 			:= XML_rs.AddChild( tbl10[x] );
        XML_data2.NodeValue := u.F_Left;
    end;

    Inc( x );

    if True = u.E_Width then begin
        XML_data2 			:= XML_rs.AddChild( tbl10[x] );
        XML_data2.NodeValue := u.F_Width;
    end;

    Inc( x );

    if True = u.E_Top then begin
        XML_data2 			:= XML_rs.AddChild( tbl10[x] );
        XML_data2.NodeValue := u.F_Top;
    end;

    Inc( x );

    if True = u.E_Height then begin
        XML_data2 			:= XML_rs.AddChild( tbl10[x] );
        XML_data2.NodeValue := u.F_Height;
    end;

    Inc( x );

    if True = u.E_SystemModeBitMask then begin
        XML_data2 			:= XML_rs.AddChild( tbl10[x] );
        XML_data2.NodeValue := u.F_SystemModeBitMask;
    end;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
const
    tbl11 : array [0..7] of string = (
        'F_Id',
        'F_FrameId',
        'F_SrcPortNo',
        'F_Order',
        'F_Left',
        'F_Width',
        'F_Top',
        'F_Height'
    );

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function TScreenList.UiColorSrcKeyButtonLoad( cnl : IXMLNodeList ) : TUiColorSrcKeyButton;
var
    j : integer;
    str, txt : string;
    u : TUiColorSrcKeyButton;

begin

    u := TUiColorSrcKeyButton.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        case AnsiIndexStr( str, tbl11 ) of
        0:
            begin
                u.F_Id    := StrToIntDef( txt, -1 );
                u.E_Id    := True;
            end;

        1:
            begin
                u.F_FrameId            := txt;
                u.E_FrameId            := True;
            end;

        2:
            begin
                u.F_SrcPortNo            := txt;
                u.E_SrcPortNo            := True;
            end;

        3:
            begin
                u.F_Order        := txt;
                u.E_Order        := True;
            end;

        4:
            begin
                u.F_Left        := txt;
                u.E_Left        := True;
            end;

        5:
            begin
                u.F_Width        := txt;
                u.E_Width        := True;
            end;

        6:
            begin
                u.F_Top        := txt;
                u.E_Top        := True;
            end;

        7:
            begin
                u.F_Height        := txt;
                u.E_Height        := True;
            end;

        else
            beep;

        end;
    end;

    Result := u;
end;

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
procedure TScreenList.UiColorSrcKeyButtonSave( XML_Doc : IXMLDocument; u : TUiColorSrcKeyButton );
var
	XML_rs    	: IXMLNode;
	XML_data2   : IXMLNode;
    x : integer;

begin

    XML_rs := XML_Doc.DocumentElement.AddChild( 'UiColorSrcKeyButton' );

    x := 0;

    if True = u.E_Id then begin
        XML_data2 			:= XML_rs.AddChild( tbl11[x] );
        XML_data2.NodeValue := u.F_Id;
    end;

    Inc( x );

    if True = u.E_FrameId then begin
        XML_data2 			:= XML_rs.AddChild( tbl11[x] );
        XML_data2.NodeValue := u.F_FrameId;
    end;

    Inc( x );

    if True = u.E_SrcPortNo then begin
        XML_data2 			:= XML_rs.AddChild( tbl11[x] );
        XML_data2.NodeValue := u.F_SrcPortNo;
    end;

    Inc( x );

    if True = u.E_Order then begin
        XML_data2 			:= XML_rs.AddChild( tbl11[x] );
        XML_data2.NodeValue := u.F_Order;
    end;

    Inc( x );

    if True = u.E_Left then begin
        XML_data2 			:= XML_rs.AddChild( tbl11[x] );
        XML_data2.NodeValue := u.F_Left;
    end;

    Inc( x );

    if True = u.E_Width then begin
        XML_data2 			:= XML_rs.AddChild( tbl11[x] );
        XML_data2.NodeValue := u.F_Width;
    end;

    Inc( x );

    if True = u.E_Top then begin
        XML_data2 			:= XML_rs.AddChild( tbl11[x] );
        XML_data2.NodeValue := u.F_Top;
    end;

    Inc( x );

    if True = u.E_Height then begin
        XML_data2 			:= XML_rs.AddChild( tbl11[x] );
        XML_data2.NodeValue := u.F_Height;
    end;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TDisplayDb.Create;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TDisplayDb.Destroy;
begin
    inherited;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TDisplayList.Create;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TDisplayList.Destroy;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TDisplayList.GetData( index : integer ) : TDisplayDb;
begin
    Result := nil;

    if (index < 0) or (Count <= index) then Exit;

    Result := TDisplayDb( Items[ index ] );
end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
procedure TDisplayList.ClearAll;
var
    dt : TDisplayDb;

begin
    while True do begin
        dt := Data[0];
        if nil = dt then break;

        Extract( dt );
        dt.Free;
    end;

end;

const
    FDisplayDbTable : array [0..3] of string = (
        'Message',
        'EnumType',
        'EnumValue',
        'DspSettings'
    );

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TDisplayList.Load( fn : string ) : Boolean;
var
    xml : IXMLDocument;
   	cnl, cnl0 : IXMLNodeList;
    j, n : integer;
	a : string;
//    count : array [0..15] of integer;

    s : TDisplayDb;

begin
    Result := False;

    // ファイルなし
    if False = FileExists( fn ) then Exit;

    // XML読み込み
    xml	:= LoadXMLDocument( fn );

    // 'ScreenDb'
    cnl0	:= xml.DocumentElement.ChildNodes;

    for j:=0 to cnl0.Count-1 do begin

        a    := cnl0.Nodes[j].NodeName;

        n := AnsiIndexStr( a, FDisplayDbTable );
        if n = -1 then begin
            beep;
            continue;
        end;

//        Inc( count[ n ] );

        cnl		:= cnl0.Nodes[j].ChildNodes;

        case n of
        0:  s := DisplayMessageLoad( cnl );
        1:  s := DisplayEmptyTypeLoad( cnl );
        2:  s := DisplayDisplayEmptyValueLoad( cnl );
        3:  s := DisplayDspSettingsLoad( cnl );
        else
            s := nil;
        end;

        if s <> nil then begin
            Add( s );
        end;

    end;

{
    m := 0;
    for j:=0 to HIGH( count ) do begin
        m := m + count[j];
    end;
}

    Result := False;
end;


//------------------------------------------------------------------------------
//  XMLファイル書き込み
//------------------------------------------------------------------------------
procedure TDisplayList.Save( fn : string );
var
	XML_Doc     : IXMLDocument;
    s : TDisplayDb;
    i : integer;

begin

	// XML書き込み処理
    XML_Doc 			:= TXMLDocument.Create(nil);

	// 出力時にインデント
    XML_Doc.Options 	:= [doNodeAutoIndent];
{   doNodeAutoCreate,
    doNodeAutoIndent,
    doAttrNull,
    doAutoPrefix,
    doNamespaceDecl,
    doAutoSave
}
	XML_Doc.Active  	:= True;
//    XML_Doc.Encoding	:= 'UTF-8';
    XML_Doc.Version		:= '1.0';
    XML_Doc.StandAlone  := 'yes';

    // ルート
    XML_Doc.AddChild( 'DisplayDb' );

    for i:=0 to Count-1 do begin

        s := Data[i];

        case s.FDataType of
        0:  DisplayMessageSave( XML_Doc, TDisplayMessage( s ) );
        1:  DisplayEnumTypeSave( XML_Doc, TDisplayEnumType( s ) );
        2:  DisplayEnumValueSave( XML_Doc, TDisplayEnumValue( s ) );
        3:  DisplayDspSettingsSave( XML_Doc, TDisplayDspSettings( s ) );
        end;

    end;

    // 保存
	try
    	if fn <> '' then	XML_Doc.SaveToFile( fn );
    except
		;
    end;

end;

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
const
    tbl_0 : array [0..3] of string = (
        'F_Id',
        'F_MessageCode',
        'F_Message',
        'F_Memo'
    );

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function TDisplayList.DisplayMessageLoad( cnl : IXMLNodeList ) : TDisplayMessage;
var
    j : integer;
    str, txt : string;
    u : TDisplayMessage;

begin

    u := TDisplayMessage.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        case AnsiIndexStr( str, tbl_0 ) of
        0:
            begin
                u.F_Id          := txt;
                u.E_Id          := True;
            end;

        1:
            begin
                u.F_MessageCode := txt;
                u.E_MessageCode := True;
            end;

        2:
            begin
                u.F_Message     := txt;
                u.E_Message     := True;
            end;

        3:
            begin
                u.F_Memo     := txt;
                u.E_Memo     := True;
            end;

        else
            begin
                beep;
            end;
        end;
    end;

    Result := u;
end;

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
procedure TDisplayList.DisplayMessageSave( XML_Doc : IXMLDocument; u : TDisplayMessage );
var
	XML_rs    	: IXMLNode;
	XML_data2   : IXMLNode;
    x : integer;

begin

    XML_rs := XML_Doc.DocumentElement.AddChild( 'Message' );

    x := 0;

    if True = u.E_Id then begin
        XML_data2 			:= XML_rs.AddChild( tbl_0[x] );
        XML_data2.NodeValue := u.F_Id;
    end;

    Inc( x );

    if True = u.E_MessageCode then begin
        XML_data2 			:= XML_rs.AddChild( tbl_0[x] );
        XML_data2.NodeValue := u.F_MessageCode;
    end;

    Inc( x );

    if True = u.E_Message then begin
        XML_data2 			:= XML_rs.AddChild( tbl_0[x] );
        XML_data2.NodeValue := u.F_Message;
    end;

    Inc( x );

    if True = u.E_Memo then begin
        XML_data2 			:= XML_rs.AddChild( tbl_0[x] );
        XML_data2.NodeValue := u.F_Memo;
    end;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
const
    tbl_1 : array [0..1] of string = (
        'F_Name',
        'F_Note'
    );

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function TDisplayList.DisplayEmptyTypeLoad( cnl : IXMLNodeList ) : TDisplayEnumType;
var
    j : integer;
    str, txt : string;
    u : TDisplayEnumType;

begin

    u := TDisplayEnumType.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        case AnsiIndexStr( str, tbl_1 ) of
        0:
            begin
                u.F_Name    := txt;
                u.E_Name    := True;
            end;

        1:
            begin
                u.F_Note    := txt;
                u.E_Note    := True;
            end;

        else
            begin
                beep;
            end;

        end;
    end;

    Result := u;
end;

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
procedure TDisplayList.DisplayEnumTypeSave( XML_Doc : IXMLDocument; u : TDisplayEnumType );
var
	XML_rs    	: IXMLNode;
	XML_data2   : IXMLNode;
    x : integer;

begin

    XML_rs := XML_Doc.DocumentElement.AddChild( 'EnumType' );

    x := 0;

    if True = u.E_Name then begin
        XML_data2 			:= XML_rs.AddChild( tbl_1[x] );
        XML_data2.NodeValue := u.F_Name;
    end;

    Inc( x );

    if True = u.E_Note then begin
        XML_data2 			:= XML_rs.AddChild( tbl_1[x] );
        XML_data2.NodeValue := u.F_Note;
    end;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
const
    tbl_2 : array [0..6] of string = (
        'F_EnumName',
        'F_Value',
        'F_Order',
        'F_Text',
        'F_Tag',
        'F_Arrtibute',

        'F_IsHidden'

    );

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function TDisplayList.DisplayDisplayEmptyValueLoad( cnl : IXMLNodeList ) : TDisplayEnumvalue;
var
    j : integer;
    str, txt : string;
    u : TDisplayEnumValue;

begin

    u := TDisplayEnumValue.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        case AnsiIndexStr( str, tbl_2 ) of
        0:
            begin
                u.F_EnumName    := txt;
                u.E_EnumName    := True;
            end;

        1:
            begin
                u.F_Value       := txt;
                u.E_Value       := True;
            end;

        2:
            begin
                u.F_Order       := txt;
                u.E_Order       := True;
            end;

        3:
            begin
                u.F_Text        := txt;
                u.E_Text        := True;
            end;

        4:
            begin
                u.F_Tag         := txt;
                u.E_Tag         := True;
            end;

        5:
            begin
                u.F_Arrtibute   := txt;
                u.E_Arrtibute   := True;
            end;

        6:
            begin
                u.F_IsHidden    := txt;
                u.E_IsHidden    := True;
            end;

        else
            begin
                beep;
            end;
        end;
    end;

    Result := u;
end;

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
procedure TDisplayList.DisplayEnumValueSave( XML_Doc : IXMLDocument; u : TDisplayEnumValue );
var
	XML_rs    	: IXMLNode;
	XML_data2   : IXMLNode;
    x : integer;

begin

    XML_rs := XML_Doc.DocumentElement.AddChild( 'EnumValue' );

    x := 0;

    if True = u.E_EnumName then begin
        XML_data2 			:= XML_rs.AddChild( tbl_2[x] );
        XML_data2.NodeValue := u.F_EnumName;
    end;

    Inc( x );

    if True = u.E_Value then begin
        XML_data2 			:= XML_rs.AddChild( tbl_2[x] );
        XML_data2.NodeValue := u.F_Value;
    end;
    Inc( x );

    if True = u.E_Order then begin
        XML_data2 			:= XML_rs.AddChild( tbl_2[x] );
        XML_data2.NodeValue := u.F_Order;
    end;

    Inc( x );

    if True = u.E_Text then begin
        XML_data2 			:= XML_rs.AddChild( tbl_2[x] );
        XML_data2.NodeValue := u.F_Text;
    end;

    Inc( x );

    if True = u.E_Tag then begin
        XML_data2 			:= XML_rs.AddChild( tbl_2[x] );
        XML_data2.NodeValue := u.F_Tag;
    end;

    Inc( x );

    if True = u.E_Arrtibute then begin
        XML_data2 			:= XML_rs.AddChild( tbl_2[x] );
        XML_data2.NodeValue := u.F_Arrtibute;
    end;

end;


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
const
    tbl_3 : array [0..3] of string = (
        'F_ValueId',
        'F_Value',
        'F_Order',
        'F_Note'
    );

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function TDisplayList.DisplayDspSettingsLoad( cnl : IXMLNodeList ) : TDisplayDspSettings;
var
    j : integer;
    str, txt : string;
    u : TDisplayDspSettings;

begin

    u := TDisplayDspSettings.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        case AnsiIndexStr( str, tbl_3 ) of
        0:
            begin
                u.F_ValueId := txt;
                u.E_ValueId := True;
            end;

        1:
            begin
                u.F_Value   := txt;
                u.E_Value   := True;
            end;

        2:
            begin
                u.F_Order   := txt;
                u.E_Order   := True;
            end;

        3:
            begin
                u.F_Note    := txt;
                u.E_Note    := True;
            end;

        else
            begin
                beep;
            end;

        end;
    end;

    Result := u;
end;

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
procedure TDisplayList.DisplayDspSettingsSave( XML_Doc : IXMLDocument; u : TDisplayDspSettings );
var
	XML_rs    	: IXMLNode;
	XML_data2   : IXMLNode;
    x : integer;

begin

    XML_rs := XML_Doc.DocumentElement.AddChild( 'DspSettings' );

    x := 0;

    if True = u.E_ValueId then begin
        XML_data2 			:= XML_rs.AddChild( tbl_3[x] );
        XML_data2.NodeValue := u.F_ValueId;
    end;

    Inc( x );

    if True = u.E_Value then begin
        XML_data2 			:= XML_rs.AddChild( tbl_3[x] );
        XML_data2.NodeValue := u.F_Value;
    end;

    Inc( x );

    if True = u.E_Order then begin
        XML_data2 			:= XML_rs.AddChild( tbl_3[x] );
        XML_data2.NodeValue := u.F_Order;
    end;

    Inc( x );

    if True = u.E_Note then begin
        XML_data2 			:= XML_rs.AddChild( tbl_3[x] );
        XML_data2.NodeValue := u.F_Note;
    end;
end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TDisplayMessage.Create;
begin
    inherited;

    FDataType       := 0;

    F_Id            := '';
    E_Id            := False;

    F_MessageCode   := '';
    E_MessageCode   := False;

    F_Message       := '';
    E_Message       := False;

    F_Memo          := '';
    E_Memo          := False;
end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TDisplayMessage.Destroy;
begin
    inherited;

end;


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TDisplayEnumType.Create;
begin
    inherited;

    FDataType   := 1;

    F_Name      := '';
    E_Name      := False;

    F_Note      := '';
    E_Note      := False;

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TDisplayEnumType.Destroy;
begin
    inherited;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TDisplayEnumvalue.Create;
begin
    inherited;

    FDataType   := 2;

    F_EnumName  := '';
    E_EnumName  := False;

    F_Value     := '';
    E_Value     := False;

    F_Order     := '';
    E_Order     := False;

    F_Text      := '';
    E_Text      := False;

    F_Arrtibute := '';
    E_Arrtibute := False;

    F_Tag       := '';
    E_Tag       := False;
end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TDisplayEnumvalue.Destroy;
begin
    inherited;

end;


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TDisplayDspSettings.Create;
begin
    inherited;

    FDataType   := 3;

    F_ValueId   := '';
    E_ValueId   := False;

    F_Value     := '';
    E_Value     := False;

    F_Order     := '';
    E_Order     := False;

    F_Note      := '';
    E_Note      := False;
end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TDisplayDspSettings.Destroy;
begin
    inherited;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TProgramDb.Create;
begin
    inherited;

    FSourceList         := TXPTSourceList.Create;
    FDeviceList         := TPgDeviceList.Create;
    FDestList           := TPgDestinationList.Create;
    FCrosspointList     := TPgCrossPointList.Create;

    FMultiViewList      := TPgMultiViewList.Create;
end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TProgramDb.Destroy;
begin
    inherited;

end;

const
    FProgramDbTable : array [0..8] of string = (
        'PgSettings',
        'PgXpt',
        'PgDevice',
        'PgBkupData',
        'PgDstName',
        'PgSrcName',
        'PgSrcKeyColor',
        'PgPanelKey',

        'PgMvDstButton'
    );

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TProgramDb.Load( fn : string ) : Boolean;
var
    xml : IXMLDocument;
   	cnl, cnl0 : IXMLNodeList;
    j, n : integer;
	a : string;
//    count : array [0..15] of integer;

begin
    Result := False;

    // ファイルなし
    if False = FileExists( fn ) then Exit;

    // XML読み込み
    xml	:= LoadXMLDocument( fn );

    // 'ProgramDb'
    cnl0	:= xml.DocumentElement.ChildNodes;

    for j:=0 to cnl0.Count-1 do begin

        a    := cnl0.Nodes[j].NodeName;

        n := AnsiIndexStr( a, FProgramDbTable );
        if n = -1 then begin
            beep;
            continue;
        end;

//        Inc( count[ n ] );

        cnl		:= cnl0.Nodes[j].ChildNodes;

        case n of
        0:  ;                           // PgSettings
        1:  PgCrossPointLoad( cnl );    // PgXpt
        2:  PgDeviceLoad( cnl );        // PgDevice
        3:  ;                           // PgBkupData
        4:  PgDestinationLoad( cnl );   // PgDstName
        5:  XPTSourceLoad( cnl );       // PgSrcName
        6:  ;                           // PgSrcKeyColor
        7:  PgPanelKeyLoad( cnl );      // PgPanelKey
        8:  PgMvDstButtonLoad( cnl );   // PgMvDstButton;
        end;

    end;

{
    m := 0;
    for j:=0 to HIGH( count ) do begin
        m := m + count[j];
    end;
}
    Result := False;
end;


//------------------------------------------------------------------------------
//  PgDevice
//------------------------------------------------------------------------------
const
    tbl_11 : array [0..2] of string = (
        'F_DeviceId',
        'F_DeviceTypeName',
        'F_BkupDateTime'
    );

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
procedure TProgramDb.PgDeviceLoad( cnl : IXMLNodeList );
var
    j : integer;
    str, txt : string;
    u : TPgDeviceData;

begin

    u := TPgDeviceData.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        case AnsiIndexStr( str, tbl_11 ) of
        0:  u.DeviceId          := txt;
        1:  u.DeviceTypeName    := txt;
        2:  u.BkupDateTime      := txt;
        else
            begin
                beep;
            end;
        end;
    end;

    FDeviceList.Add( u );
end;

//------------------------------------------------------------------------------
//  PgPanelKey
//------------------------------------------------------------------------------
const
    tbl_12 : array [0..5] of string = (
        'F_DeviceId',
        'F_PageNo',
        'F_KeyNo',
        'F_KeyType',
        'F_Value',
        'F_IsInhibit'
    );

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
procedure TProgramDb.PgPanelKeyLoad( cnl : IXMLNodeList );
var
    j : integer;
    str, txt : string;
    u : TPgPanelKey;
    dv : TPgDeviceData;

begin

    u := TPgPanelKey.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        case AnsiIndexStr( str, tbl_12 ) of
        0:  u.DeviceId  := txt;
        1:  u.PageNo    := StrToIntDef( txt, 0 );
        2:  u.KeyNo     := txt;
        3:  u.KeyType   := txt;
        4:  u.Value     := txt;
        5:  u.IsInhibit := txt;
        else
            begin
                beep;
            end;
        end;
    end;

    try
        dv := FDeviceList.SearchDeviceID( u.DeviceId );
        if nil <> dv then begin
            if u.PageNo < TPgDeviceData.MAX_PAGE then
                dv.Page[ u.PageNo ].Add( u )
            else
                u.Free;
        end;

    except
        beep;
    end;

end;

//------------------------------------------------------------------------------
//  PgMvDstButton
//------------------------------------------------------------------------------
const
    tbl_13 : array [0..8] of string = (
        'F_Id',
        'F_FrameId',
        'F_PresetNo',
        'F_DstPortNo',
        'F_Order',
        'F_Left',
        'F_Width',
        'F_Top',
        'F_Height'
    );

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
procedure TProgramDb.PgMvDstButtonLoad( cnl : IXMLNodeList );
var
    j : integer;
    str, txt : string;
    u : TPgMvDstButton;

begin

    u := TPgMvDstButton.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        case AnsiIndexStr( str, tbl_13 ) of
        0:  u.F_Id          := txt;
        1:  u.F_FrameId     := txt;
        2:  u.F_PresetNo    := txt;
        3:  u.F_DstPortNo   := txt;
        4:  u.F_Order       := txt;
        5:  u.F_Left        := txt;
        6:  u.F_Width       := txt;
        7:  u.F_Top         := txt;
        8:  u.F_Height      := txt;
        else
            begin
                beep;
            end;

        end;

    end;

{
    try
        dv := FDeviceList.SearchDeviceID( u.DeviceId );
        if nil <> dv then begin
            if u.PageNo < TPgDeviceData.MAX_PAGE then
                dv.Page[ u.PageNo ].Add( u )
            else
                u.Free;
        end;

    except
        beep;
    end;
}


    FMultiViewList.Add( u );

end;

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
const
    tbl_10 : array [0..24] of string = (
        'F_SrcPortNo',
        'F_DefaultDescription',
        'F_DefaultDescription4k',
        'F_Description',
        'F_Description4k',
        'F_InputName',
        'F_ClipDuration',
        'F_NameHeader',
        'F_NameFooter',
        'F_BusLinkId',
        'F_DescriptionLinkId',
        'F_DescriptionLinkId4k',
        'F_InputNameLinkId',
        'F_JMode',
        'F_JLength',
        'F_JDelimiter',
        'F_IsNameSendTarget',
        'F_DispMode',
        'F_DispModeName',
        'F_JMode2',
        'F_UseWideChar',

        'F_DefaultDescriptionQd',
        'F_DescriptionQd',
        'F_DefaultInputName',
        'F_IsInputNameNameHeaderLinked'

    );

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
procedure TProgramDb.XPTSourceLoad( cnl : IXMLNodeList );
var
    j : integer;
    str, txt : string;
    u : TXPTSourceData;

    n, ccn : IXMLNode;

begin

    u := TXPTSourceData.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        n := cnl.Nodes[j];
        if 0 <> n.Attributenodes.count then begin
            ccn := n.AttributeNodes[0];
            str := ccn.NodeName;
            txt	:= ccn.Text;
        end;

        case AnsiIndexStr( str, tbl_10 ) of
        0:  u.F_SrcPortNo               := txt;
        1:  u.F_DefaultDescription      := txt;
        2:  u.F_DefaultDescription4k    := txt;
        3:  u.F_Description             := txt;
        4:  u.F_Description4k           := txt;
        5:  u.F_InputName               := txt;
        6:  u.F_ClipDuration            := txt;
        7:  u.F_NameHeader              := txt;
        8:  u.F_NameFooter              := txt;
        9:  u.F_BusLinkId               := txt;
        10: u.F_DescriptionLinkId       := txt;
        11: u.F_DescriptionLinkId4k     := txt;
        12: u.F_InputNameLinkId         := txt;
        13: u.F_JMode                   := txt;
        14: u.F_JLength                 := txt;
        15: u.F_JDelimiter              := txt;
        16: u.F_IsNameSendTarget        := txt;
        17: u.F_DispMode                := txt;
        18: u.F_DispModeName            := txt;
        19: u.F_JMode2                  := txt;
        20: u.F_UseWideChar             := txt;

        21: u.F_DefaultDescriptionQd    := txt;
        22: u.F_DescriptionQd           := txt;
        23: u.F_DefaultInputName        := txt;
        24: u.F_IsInputNameNameHeaderLinked := txt;

        else
            begin
                beep;
            end;
        end;
    end;

    FSourceList.Add( u );
end;

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
const
    tbl_14 : array [0..17] of string = (
        'F_DstPortNo',
        'F_DefaultDescription',
        'F_DefaultDescription4k',
        'F_Description',
        'F_Description4k',
        'F_InputName',
        'F_DescriptionLinkId',
        'F_InputNameLinkId',
        'F_JMode',
        'F_JLength',
        'F_JDelimiter',
        'F_IsNameSendTarget',
        'F_JMode2',
        'F_UseWideChar',

        'F_DefaultDescriptionQd',
        'F_DescriptionQd',
        'F_DefaultInputName',
        'F_IsXptSendTarget'
    );

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
procedure TProgramDb.PgDestinationLoad( cnl : IXMLNodeList );
var
    j : integer;
    str, txt : string;
    u : TPgDestinationData;

begin
    u := TPgDestinationData.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        case AnsiIndexStr( str, tbl_14 ) of
        0:  u.F_DstPortNo               := txt;
        1:  u.F_DefaultDescription      := txt;
        2:  u.F_DefaultDescription4k    := txt;
        3:  u.F_Description             := txt;
        4:  u.F_Description4k           := txt;
        5:  u.F_InputName               := txt;
        6:  u.F_DescriptionLinkId       := txt;
        7:  u.F_InputNameLinkId         := txt;
        8:  u.F_JMode                   := txt;
        9:  u.F_JLength                 := txt;
        10: u.F_JDelimiter              := txt;
        11: u.F_IsNameSendTarget        := txt;
        12: u.F_JMode2                  := txt;
        13: u.F_UseWideChar             := txt;

        14: u.F_DefaultDescriptionQd    := txt;
        15: u.F_DescriptionQd           := txt;
        16: u.F_DefaultInputName        := txt;
        17: u.F_IsXptSendTarget         := txt;

        else
            begin
                beep;
            end;
        end;
    end;

    FDestList.Add( u );
end;

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
const
    tbl_15 : array [0..2] of string = (
        'F_DstPortNo',
        'F_Level',
        'F_SrcPortNo'
    );

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
procedure TProgramDb.PgCrossPointLoad( cnl : IXMLNodeList );
var
    j : integer;
    str, txt : string;
    u : TPgCrossPoint;

begin
    u := TPgCrossPoint.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        case AnsiIndexStr( str, tbl_15 ) of
        0:  u.F_DstPortNo               := txt;
        1:  u.F_Level                   := txt;
        2:  u.F_SrcPortNo               := txt;

        else
            beep;

        end;
    end;

    FCrosspointList.Add( u );
end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TXPTSourceData.Create;
begin
    inherited;

//    Fport := 0;

    F_SrcPortNo               := '';
    F_DefaultDescription      := '';
    F_DefaultDescription4k    := '';
    F_Description             := '';
    F_Description4k           := '';
    F_InputName               := '';
    F_ClipDuration            := '';
    F_NameHeader              := '';
    F_NameFooter              := '';
    F_BusLinkId               := '';
    F_DescriptionLinkId       := '';
    F_DescriptionLinkId4k     := '';
    F_InputNameLinkId         := '';
    F_JMode                   := '';
    F_JLength                 := '';
    F_JDelimiter              := '';
    F_IsNameSendTarget        := '';
    F_DispMode                := '';
    F_DispModeName            := '';
    F_JMode2                  := '';
    F_UseWideChar             := '';

    F_DefaultDescriptionQd    := '';
    F_DescriptionQd           := '';
    F_DefaultInputName        := '';
    F_IsInputNameNameHeaderLinked   := '';

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor 	TXPTSourceData.Destroy;
begin
    inherited;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TProgramDbList.Create;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TProgramDbList.Destroy;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
procedure TProgramDbList.ClearAll;
begin

    ;
end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TXPTSourceList.Create;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TXPTSourceList.Destroy;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TXPTSourceList.GetData( index : integer ) : TXPTSourceData;
begin
    Result := nil;

    if (index < 0) or (Count <= index) then Exit;

    Result := TXPTSourceData( Items[ index ] );
end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
procedure TXPTSourceList.ClearAll;
var
    dt : TXPTSourceData;

begin
    while True do begin
        dt := Data[0];
        if dt = nil then break;

        Extract( dt );
        dt.Free;
    end;

end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TXPTSourceList.Search( port : integer ) : string;
var
    i : integer;
    dt : TXPTSourceData;
    portstr : string;

begin
    portstr := IntToStr( port );

    for i:=0 to Count-1 do begin
        dt := Data[i];
//        if dt.Port = port then begin
        if dt.F_SrcPortNo = portstr then begin
            Result := dt.F_DefaultDescription;  //.Name;
            Exit;
        end;
    end;

    Result := '';
end;


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TPgDeviceData.Create;
var
    i : integer;

begin
    inherited;

    FDeviceId       := '';
    FDeviceTypeName := '';
    FBkupDateTime   := '';

    for i:=0 to HIGH( FPage ) do
        FPage[i]    := TPgPanelKeyList.Create;

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor 	TPgDeviceData.Destroy;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TPgDeviceData.GetPage( index : integer ) : TPgPanelKeyList;
begin
    Result := FPage[ index ];
end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TPgMvDstButton.Create;
var
    i : integer;

begin
    inherited;

    F_Id        := '';
    F_FrameId   := '';
    F_PresetNo  := '';
    F_DstPortNo := '';
    F_Order     := '';
    F_Left      := '';
    F_Width     := '';
    F_Top       := '';
    F_Height    := '';


end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor 	TPgMvDstButton.Destroy;
begin
    inherited;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TPgDeviceList.Create;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TPgDeviceList.Destroy;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TPgDeviceList.GetData( index : integer ) : TPgDeviceData;
begin
    Result := nil;

    if (index < 0) or (Count <= index) then Exit;

    Result := TPgDeviceData( Items[ index ] );
end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TPgDeviceList.SearchDeviceID( id : string ) : TPgDeviceData;
var
    i : integer;
    d : TPgDeviceData;

begin
    for i:=0 to Count-1 do begin
        d := Data[i];
        if d.DeviceId = id then begin
            Result := d;
            Exit;
        end;
    end;

    Result := nil;
end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TPgDestinationData.Create;
begin
    inherited;

    F_DstPortNo               := '';
    F_DefaultDescription      := '';
    F_DefaultDescription4k    := '';
    F_Description             := '';
    F_Description4k           := '';
    F_InputName               := '';
    F_DescriptionLinkId       := '';
    F_InputNameLinkId         := '';
    F_JMode                   := '';
    F_JLength                 := '';
    F_JDelimiter              := '';
    F_IsNameSendTarget        := '';
    F_JMode2                  := '';
    F_UseWideChar             := '';

    F_DefaultDescriptionQd    := '';
    F_DescriptionQd           := '';
    F_DefaultInputName        := '';
    F_IsXptSendTarget         := '';

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TPgDestinationData.Destroy;
begin
    inherited;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TPgDestinationList.Create;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TPgDestinationList.Destroy;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TPgDestinationList.GetData( index : integer ) : TPgDestinationData;
begin
    Result := nil;

    if (index < 0) or (Count <= index) then Exit;

    Result := TPgDestinationData( Items[ index ] );
end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TPgDestinationList.Search( port : string ) : string;
var
    i : integer;
    dt : TPgDestinationData;

begin
    for i:=0 to Count-1 do begin
        dt := Data[i];
        if dt.F_DstPortNo = port then begin
            Result := dt.F_DefaultDescription;
            Exit;
        end;
    end;

    Result := '';
end;


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TPgPanelKey.Create;
begin
    inherited;

    FDeviceId       := '';
    FPageNo         := 0;

    FKeyNo          := '';
    FKeyType        := '';
    FValue          := '';
    FIsInhibit      := '';
end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TPgPanelKey.Destroy;
begin
    inherited;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TPgPanelKeyList.Create;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TPgPanelKeyList.Destroy;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TPgPanelKeyList.GetData( index : integer ) : TPgPanelKey;
begin
    Result := nil;

    if (index < 0) or (Count <= index) then Exit;

    Result := TPgPanelKey( Items[ index ] );
end;



//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TPgCrossPoint.Create;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TPgCrossPoint.Destroy;
begin
    inherited;

end;


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TPgCrossPointList.Create;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TPgCrossPointList.Destroy;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TPgCrossPointList.GetData( index : integer ) : TPgCrossPoint;
begin
    Result := nil;

    if (index < 0) or (Count <= index) then Exit;

    Result := TPgCrossPoint( Items[ index ] );
end;


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TPgMultiViewList.Create;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TPgMultiViewList.Destroy;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TPgMultiViewList.GetData( index : integer ) : TPgMvDstButton;
begin
    Result := nil;

    if (index < 0) or (Count <= index) then Exit;

    Result := TPgMvDstButton( Items[ index ] );
end;


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TSBusDb.Create;
begin
    inherited;

    FSbDeviceList       := TSbDeviceList.Create;
    FSbPanelTypeList    := TSbPanelTypeList.Create;
    FSbDeviceTypeList   := TSbDeviceTypeList.Create;
    FSbXptBusList       := TSbXptBusList.Create;

    FSbSrcNameBusList   := TSbSrcNameBusList.Create;
    FSbSrcNameGroupList := TSbSrcNameGroupList.Create;
    FSbDstNameBusList   := TSbDstNameBusList.Create;

    FSbPanelFunctionKeyDefineList   := TSbPanelFunctionKeyDefineList.Create;
    FSbPanelFunctionKeyMappingList  := TSbPanelFunctionKeyMappingList.Create;;

    FSbSettingsList     := TSbSettingsList.Create;

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TSBusDb.Destroy;
begin
    inherited;

end;

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
const
    FSBusDbTable : array [0..23] of string = (
        'SbDevice',
        'SbPanelType',
        'SbDeviceType',

        'SbXptBus',
        'SbSrcNameBus',
        'SbSrcNameGroup',

        'SbDstNameBus',
        'SbPanelFunctionKeyDefine',
        'SbPanelFunctionKeyMapping',
        'SbSettings',

        'SbDstInhibit',
        'SbAlarmDefine',
        'SbPanelPageName',
        'SbDevicePanelPageName',
        'SbSrcColor',

        'SbDstControlTarget',

        'SbDstNameGroup',

        'SbEditSrcSetGroup',

        'SbEditDstSetGroup',

        'SbEditSrcLevelDefine',
        'SbEditDstLevelDefine',

        'SbSystemMode',

        'SbMultiLevelDst',
        'SbMultiLevelSrc'
    );

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TSBusDb.Load( fn : string ) : Boolean;
var
    xml : IXMLDocument;
   	cnl, cnl0 : IXMLNodeList;
    j, n : integer;
	a : string;
//    count : array [0..15] of integer;


begin
    Result := False;

    // ファイルなし
    if False = FileExists( fn ) then Exit;

    // XML読み込み
    xml	:= LoadXMLDocument( fn );

    // 'ProgramDb'
    cnl0	:= xml.DocumentElement.ChildNodes;

    for j:=0 to cnl0.Count-1 do begin

        a    := cnl0.Nodes[j].NodeName;

        n := AnsiIndexStr( a, FSBusDbTable );
        if n = -1 then begin
//            Inc( count[ 1 ] );
            beep;
            continue;
        end;

//        Inc( count[ n ] );

        cnl		:= cnl0.Nodes[j].ChildNodes;

        case n of
        0:  SbDeviceLoad( cnl );
        1:  SbPanelTypeLoad( cnl );
        2:  SbDeviceTypeLoad( cnl );

        3:  SbXptBusLoad( cnl );
        4:  SbSrcNameBusLoad( cnl );
        5:  SbSrcNameGroupLoad( cnl );
        6:  SbDstNameBusLoad( cnl );
        7:  SbPanelFunctionKeyDefineLoad( cnl );
        8:  SbPanelFunctionKeyMappingLoad( cnl );
        9:  SbSettingsLoad( cnl );

//        7..23:  beep;

{
        'SbDstInhibit',
        'SbAlarmDefine',
        'SbPanelPageName',
        'SbDevicePanelPageName',
        'SbSrcColor',
        'SbDstControlTarget',
        'SbDstNameGroup',

        'SbEditSrcSetGroup',
        'SbEditDstSetGroup',
        'SbEditSrcLevelDefine',
        'SbEditDstLevelDefine',
        'SbSystemMode',
        'SbMultiLevelDst',
        'SbMultiLevelSrc'
}

        end;

    end;

{
    m := 0;
    for j:=0 to HIGH( count ) do begin
        m := m + count[j];
    end;
}
    Result := False;
end;

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
const
    tbl_20  : array [0..16] of string = (
        'F_Id',
        'F_StationId',
        'F_TypeName',
        'F_Name',
        'F_IpAddress',
        'F_TimeoutMsec',
        'F_IsSendTarget',
        'F_IsRecvTarget',
        'F_IsKeyAssign',
        'F_KeyAssignPageCount',
        'F_IsEditLocked',
        'F_DeviceCategoryName',
        'F_IsNsbusDevice',

        'F_Is4kHdChangeSendTarget',
        'F_ParentStationId',
        'F_Attribute',
        'F_SentSystemMode'

    );

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function TSBusDb.SbDeviceLoad( cnl : IXMLNodeList ) : TSbDevice;
var
    j : integer;
    str, txt : string;
    u : TSbDevice;

begin

    u := TSbDevice.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        case AnsiIndexStr( str, tbl_20 ) of
        0:  u.F_Id                  := txt;
        1:  u.F_StationId           := txt;
        2:  u.F_TypeName            := txt;
        3:  u.F_Name                := txt;
        4:  u.F_IpAddress           := txt;
        5:  u.F_TimeoutMsec         := txt;
        6:  u.F_IsSendTarget        := txt;
        7:  u.F_IsRecvTarget        := txt;
        8:  u.F_IsKeyAssign         := txt;
        9:  u.F_KeyAssignPageCount  := txt;
        10: u.F_IsEditLocked        := txt;
        11: u.F_DeviceCategoryName  := txt;
        12: u.F_IsNsbusDevice       := txt;

        13: u.F_Is4kHdChangeSendTarget:= txt;
        14: u.F_ParentStationId       := txt;
        15: u.F_Attribute             := txt;
        16: u.F_SentSystemMode        := txt;
        else
            begin
                beep;
            end;
        end;
    end;

    FSbDeviceList.Add( u );

    Result := u;
end;

const
    tbl_21  : array [0..28] of string = (
        'F_Id',
        'F_Name',
        'F_Note',
        'F_UiKey',
        'F_PageCount',
        'F_HasBusNameLabel',
        'F_KeyCount',
        'F_HasControlDst',
        'F_CanCdsAssign',
        'F_CanSrcAssign',
        'F_CanDstAssign',
        'F_CanFncAssign',
        'F_AssignCancelSrcDstGpSel',
        'F_CdsStartBytes',
        'F_CdsPageByteCount',
        'F_CdsIsLitteEndian',
        'F_SrcStartBytes',
        'F_SrcPageByteCount',
        'F_DstStartBytes',
        'F_DstPageByteCount',
        'F_IsCdstAutoAssign',
        'F_CanPageCountSetting',
        'F_CanDstAssignEachPages',
        'F_AvailablePageStartBytes',

        'F_SrcDstAreaZeroClearDisabled',
        'F_IsSrcDstBothPanel',
        'F_IsManualInputModeSupported',
        'F_IsOpeMdEnabled',
        'F_IsOpeBpsEnabled'
    );

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function TSBusDb.SbPanelTypeLoad( cnl : IXMLNodeList ) : TSbPanelType;
var
    j : integer;
    str, txt : string;
    u : TSbPanelType;

begin

    u := TSbPanelType.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        case AnsiIndexStr( str, tbl_21 ) of
        0:  u.F_Id                      := txt;
        1:  u.F_Name                    := txt;
        2:  u.F_Note                    := txt;
        3:  u.F_UiKey                   := txt;
        4:  u.F_PageCount               := txt;
        5:  u.F_HasBusNameLabel         := txt;
        6:  u.F_KeyCount                := txt;
        7:  u.F_HasControlDst           := txt;
        8:  u.F_CanCdsAssign            := txt;
        9:  u.F_CanSrcAssign            := txt;
        10: u.F_CanDstAssign            := txt;
        11: u.F_CanFncAssign            := txt;
        12: u.F_AssignCancelSrcDstGpSel := txt;
        13: u.F_CdsStartBytes           := txt;
        14: u.F_CdsPageByteCount        := txt;
        15: u.F_CdsIsLitteEndian        := txt;
        16: u.F_SrcStartBytes           := txt;
        17: u.F_SrcPageByteCount        := txt;
        18: u.F_DstStartBytes           := txt;
        19: u.F_DstPageByteCount        := txt;
        20: u.F_IsCdstAutoAssign        := txt;
        21: u.F_CanPageCountSetting     := txt;
        22: u.F_CanDstAssignEachPages   := txt;
        23: u.F_AvailablePageStartBytes := txt;

        24: u.F_SrcDstAreaZeroClearDisabled := txt;
        25: u.F_IsSrcDstBothPanel           := txt;
        26: u.F_IsManualInputModeSupported  := txt;
        27: u.F_IsOpeMdEnabled              := txt;
        28: u.F_IsOpeBpsEnabled             := txt;

        else
            begin
                beep;
            end;
        end;
    end;

    FSbPanelTypeList.Add( u );

    Result := u;
end;

const
    tbl_22  : array [0..6] of string = (
        'F_Id',
        'F_Name',
        'F_PanelTypeId',
        'F_IsSubnetControllable',
        'F_IsSoapSupported',
        'F_IsNsBusDevice',

        'F_IsPanelTypeVisible'
    );

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function TSBusDb.SbDeviceTypeLoad( cnl : IXMLNodeList ) : TSbDeviceType;
var
    j : integer;
    str, txt : string;
    u : TSbDeviceType;

begin

    u := TSbDeviceType.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        case AnsiIndexStr( str, tbl_22 ) of
        0:  u.F_Id                      := txt;
        1:  u.F_Name                    := txt;
        2:  u.F_PanelTypeId             := txt;
        3:  u.F_IsSubnetControllable    := txt;
        4:  u.F_IsSoapSupported         := txt;
        5:  u.F_IsNsBusDevice           := txt;

        6:  u.F_IsPanelTypeVisible      := txt;

        else
            begin
                beep;
            end;
        end;
    end;

    FSbDeviceTypeList.Add( u );

    Result := u;
end;

const
    tbl_23  : array [0..6] of string = (
        'F_Id',
        'F_Name',
        'F_PanelTypeId',
        'F_IsSubnetControllable',
        'F_IsSoapSupported',
        'F_IsNsBusDevice',

        'F_IsPanelTypeVisible'
    );

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
procedure TSBusDb.SbXptBusLoad( cnl : IXMLNodeList );
var
    j : integer;
    str, txt : string;
    u : TSbXptBus;

begin

    u := TSbXptBus.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        case AnsiIndexStr( str, tbl_23 ) of
        0:  u.F_Id                := txt;
        1:  u.F_Name              := txt;
        2:  u.F_Text              := txt;
        3:  u.F_RecvLevelNo       := txt;
        4:  u.F_SendLevelBitMask  := txt;
        5:  u.F_SendLevelBitMaskOffLine       := txt;
        6:  u.F_DstPortNoRange    := txt;
        7:  u.F_SrcPortNoRange    := txt;
        8:  u.F_NoAssignDstNo     := txt;
        9:  u.F_NoAssignSrcNo     := txt;
        10: u.F_IsVirtual         := txt;

        else
            begin
                beep;
            end;
        end;
    end;

    FSbXptBusList.Add( u );
end;

const
    tbl_24  : array [0..5] of string = (
        'F_Id',
        'F_Name',
        'F_AliasNo',
        'F_SrcPortNoRange',
        'F_IsProgramSendTarget',
        'F_Note'
    );

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
procedure TSBusDb.SbSrcNameBusLoad( cnl : IXMLNodeList );
var
    j : integer;
    str, txt : string;
    u : TSbSrcNameBus;

begin

    u := TSbSrcNameBus.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        case AnsiIndexStr( str, tbl_24 ) of
        0:  u.F_Id                  := txt;
        1:  u.F_Name                := txt;
        2:  u.F_AliasNo             := txt;
        3:  u.F_SrcPortNoRange      := txt;
        4:  u.F_IsProgramSendTarget := txt;
        5:  u.F_Note                := txt;

        else
            begin
                beep;
            end;
        end;
    end;

    FSbSrcNameBusList.Add( u );
end;

const
    tbl_25  : array [0..3] of string = (
        'F_Id',
        'F_Name',
        'F_SrcPortNoRange',
        'F_Note'
    );

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
procedure TSBusDb.SbSrcNameGroupLoad( cnl : IXMLNodeList );
var
    j : integer;
    str, txt : string;
    u : TSbSrcNameGroup;

begin

    u := TSbSrcNameGroup.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        case AnsiIndexStr( str, tbl_25 ) of
        0:  u.F_Id                  := txt;
        1:  u.F_Name                := txt;
        2:  u.F_SrcPortNoRange      := txt;
        3:  u.F_Note                := txt;

        else
            begin
                beep;
            end;
        end;

    end;

    FSbSrcNameGroupList.Add( u );
end;


const
    tbl_26  : array [0..4] of string = (
        'F_Id',
        'F_Name',
        'F_DstPortNoRange',
        'F_IsProgramSendTarget',
        'F_Note'
    );

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
procedure TSBusDb.SbDstNameBusLoad( cnl : IXMLNodeList );
var
    j : integer;
    str, txt : string;
    u : TSbDstNameBus;

begin

    u := TSbDstNameBus.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        case AnsiIndexStr( str, tbl_26 ) of
        0:  u.F_Id                  := txt;
        1:  u.F_Name                := txt;
        2:  u.F_DstPortNoRange      := txt;
        3:  u.F_IsProgramSendTarget := txt;
        4:  u.F_Note                := txt;

        else
            begin
                beep;
            end;
        end;

    end;

    FSbDstNameBusList.Add( u );
end;

const
    tbl_27  : array [0..1] of string = (
        'F_Id',
        'F_Text'
    );


//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
procedure TSBusDb.SbPanelFunctionKeyDefineLoad( cnl : IXMLNodeList );
var
    j : integer;
    str, txt : string;
    u : TSbPanelFunctionKeyDefine;

begin

    u := TSbPanelFunctionKeyDefine.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        case AnsiIndexStr( str, tbl_27 ) of
        0:  u.F_Id                  := txt;
        1:  u.F_Text                := txt;

        else
            begin
                beep;
            end;
        end;

    end;

    FSbPanelFunctionKeyDefineList.Add( u );
end;


const
    tbl_28  : array [0..3] of string = (
        'F_Id',
        'F_PanelTypeId',
        'F_FunctionId',
        'F_FunctionNo'

    );


//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
procedure TSBusDb.SbPanelFunctionKeyMappingLoad( cnl : IXMLNodeList );
var
    j : integer;
    str, txt : string;
    u : TSbPanelFunctionKeyMapping;

begin

    u := TSbPanelFunctionKeyMapping.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        case AnsiIndexStr( str, tbl_28 ) of
        0:  u.F_Id          := txt;
        1:  u.F_PanelTypeId := txt;
        2:  u.F_FunctionId  := txt;
        3:  u.F_FunctionNo  := txt;

        else
            begin
                beep;
            end;
        end;

    end;

    FSbPanelFunctionKeyMappingList.Add( u );
end;

const
    tbl_29  : array [0..1] of string = (
        'F_ValueId',
        'F_Value'
    );


//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
procedure TSBusDb.SbSettingsLoad( cnl : IXMLNodeList );
var
    j : integer;
    str, txt : string;
    u : TSbSettings;

begin

    u := TSbSettings.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        case AnsiIndexStr( str, tbl_29 ) of
        0:  u.F_ValueId         := txt;
        1:  u.F_Value           := txt;

        else
            begin
                beep;
            end;
        end;

    end;

    FSbSettingsList.Add( u );
end;




//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TSbDevice.Create;
begin
    inherited;

    F_Id                    := '';
    F_StationId             := '';
    F_TypeName              := '';
    F_Name                  := '';
    F_IpAddress             := '';
    F_TimeoutMsec           := '';
    F_IsSendTarget          := '';
    F_IsRecvTarget          := '';
    F_IsKeyAssign           := '';
    F_KeyAssignPageCount    := '';
    F_IsEditLocked          := '';
    F_DeviceCategoryName    := '';
    F_IsNsbusDevice         := '';

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TSbDevice.Destroy;
begin
    inherited;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TSbPanelType.Create;
begin
    inherited;

    F_Id                        := '';
    F_Name                      := '';
    F_Note                      := '';
    F_UiKey                     := '';
    F_PageCount                 := '';
    F_HasBusNameLabel           := '';
    F_KeyCount                  := '';
    F_HasControlDst             := '';
    F_CanCdsAssign              := '';
    F_CanSrcAssign              := '';
    F_CanDstAssign              := '';
    F_CanFncAssign              := '';
    F_AssignCancelSrcDstGpSel   := '';
    F_CdsStartBytes             := '';
    F_CdsPageByteCount          := '';
    F_CdsIsLitteEndian          := '';
    F_SrcStartBytes             := '';
    F_SrcPageByteCount          := '';
    F_DstStartBytes             := '';
    F_DstPageByteCount          := '';
    F_IsCdstAutoAssign          := '';
    F_CanPageCountSetting       := '';
    F_CanDstAssignEachPages     := '';
    F_AvailablePageStartBytes   := '';

    F_SrcDstAreaZeroClearDisabled := '';
    F_IsSrcDstBothPanel           := '';
    F_IsManualInputModeSupported  := '';
    F_IsOpeMdEnabled              := '';
    F_IsOpeBpsEnabled             := '';

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TSbPanelType.Destroy;
begin
    inherited;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TSbDeviceList.Create;
begin
    inherited;


end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TSbDeviceList.Destroy;
begin
    inherited;

end;


//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TSbDeviceList.GetData( index : integer ) : TSbDevice;
begin
    Result := nil;

    if (index < 0) or (Count <= index) then Exit;

    Result := TSbDevice( Items[ index ] );
end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TSbPanelTypeList.Create;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TSbPanelTypeList.Destroy;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TSbPanelTypeList.GetData( index : integer ) : TSbPanelType;
begin
    Result := nil;

    if (index < 0) or (Count <= index) then Exit;

    Result := TSbPanelType( Items[ index ] );
end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TSbDeviceType.Create;
begin
    inherited;

    F_Id                        := '';
    F_Name                      := '';
    F_PanelTypeId               := '';
    F_IsSubnetControllable      := '';
    F_IsSoapSupported           := '';
    F_IsNsBusDevice             := '';

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TSbDeviceType.Destroy;
begin
    inherited;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TSbDeviceTypeList.Create;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TSbDeviceTypeList.Destroy;
begin
    inherited;

end;


//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TSbDeviceTypeList.GetData( index : integer ) : TSbDeviceType;
begin
    Result := nil;

    if (index < 0) or (Count <= index) then Exit;

    Result := TSbDeviceType( Items[ index ] );
end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TSbXptBus.Create;
begin
    inherited;

    F_Id                := '';
    F_Name              := '';
    F_Text              := '';
    F_RecvLevelNo       := '';
    F_SendLevelBitMask  := '';
    F_SendLevelBitMaskOffLine       := '';
    F_DstPortNoRange    := '';
    F_SrcPortNoRange    := '';
    F_NoAssignDstNo     := '';
    F_NoAssignSrcNo     := '';
    F_IsVirtual         := '';

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TSbXptBus.Destroy;
begin
    inherited;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TSbXptBusList.Create;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TSbXptBusList.Destroy;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TSbXptBusList.GetData( index : integer ) : TSbXptBus;
begin
    Result := nil;

    if (index < 0) or (Count <= index) then Exit;

    Result := TSbXptBus( Items[ index ] );
end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TSbSrcNameBus.Create;
begin
    inherited;

    F_Id                    := '';
    F_Name                  := '';
    F_AliasNo               := '';
    F_SrcPortNoRange        := '';
    F_IsProgramSendTarget   := '';
    F_Note                  := '';

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TSbSrcNameBus.Destroy;
begin
    inherited;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TSbSrcNameBusList.Create;
begin
    inherited;


end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TSbSrcNameBusList.Destroy;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TSbSrcNameBusList.GetData( index : integer ) : TSbSrcNameBus;
begin
    Result := nil;

    if (index < 0) or (Count <= index) then Exit;

    Result := TSbSrcNameBus( Items[ index ] );
end;






//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TSbSrcNameGroup.Create;
begin
    inherited;

    F_Id                    := '';
    F_Name                  := '';
    F_SrcPortNoRange        := '';
    F_Note                  := '';

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TSbSrcNameGroup.Destroy;
begin
    inherited;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TSbSrcNameGroupList.Create;
begin
    inherited;


end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TSbSrcNameGroupList.Destroy;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TSbSrcNameGroupList.GetData( index : integer ) : TSbSrcNameGroup;
begin
    Result := nil;

    if (index < 0) or (Count <= index) then Exit;

    Result := TSbSrcNameGroup( Items[ index ] );
end;


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TSbDstNameBus.Create;
begin
    inherited;

    F_Id                    := '';
    F_Name                  := '';
    F_AliasNo               := '';
    F_DstPortNoRange        := '';
    F_IsProgramSendTarget   := '';
    F_Note                  := '';

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TSbDstNameBus.Destroy;
begin
    inherited;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TSbDstNameBusList.Create;
begin
    inherited;


end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TSbDstNameBusList.Destroy;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TSbDstNameBusList.GetData( index : integer ) : TSbDstNameBus;
begin
    Result := nil;

    if (index < 0) or (Count <= index) then Exit;

    Result := TSbDstNameBus( Items[ index ] );
end;


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TSbPanelFunctionKeyDefine.Create;
begin
    inherited;

    F_Id                    := '';
    F_Text                  := '';

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TSbPanelFunctionKeyDefine.Destroy;
begin
    inherited;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TSbPanelFunctionKeyDefineList.Create;
begin
    inherited;


end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TSbPanelFunctionKeyDefineList.Destroy;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TSbPanelFunctionKeyDefineList.GetData( index : integer ) : TSbPanelFunctionKeyDefine;
begin
    Result := nil;

    if (index < 0) or (Count <= index) then Exit;

    Result := TSbPanelFunctionKeyDefine( Items[ index ] );
end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TSbPanelFunctionKeyMapping.Create;
begin
    inherited;

    F_Id                    := '';
    F_PanelTypeId           := '';
    F_FunctionId            := '';
    F_FunctionNo            := '';

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TSbPanelFunctionKeyMapping.Destroy;
begin
    inherited;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TSbPanelFunctionKeyMappingList.Create;
begin
    inherited;


end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TSbPanelFunctionKeyMappingList.Destroy;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TSbPanelFunctionKeyMappingList.GetData( index : integer ) : TSbPanelFunctionKeyMapping;
begin
    Result := nil;

    if (index < 0) or (Count <= index) then Exit;

    Result := TSbPanelFunctionKeyMapping( Items[ index ] );
end;



//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TSbSettings.Create;
begin
    inherited;

    F_ValueId       := '';
    F_Value         := '';
end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TSbSettings.Destroy;
begin
    inherited;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TSbSettingsList.Create;
begin
    inherited;


end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TSbSettingsList.Destroy;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TSbSettingsList.GetData( index : integer ) : TSbSettings;
begin
    Result := nil;

    if (index < 0) or (Count <= index) then Exit;

    Result := TSbSettings( Items[ index ] );
end;











//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TProgramIndex.Create;
begin
    inherited;

    F_Id                := '';
    F_CategoryName      := '';
    F_CategoryName2     := '';
    F_CategoryName3     := '';
    F_ProgramName       := '';
    F_IsLocked          := '';
    F_CreatedDateTime   := '';
    F_UpdatedDateTime   := '';
    F_CategoryOrder     := '';
    F_CategoryOrder2    := '';
    F_CategoryOrder3    := '';
    F_ProgramMemo       := '';
    F_ProgramOrder      := '';
    F_SystemMode        := '';

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TProgramIndex.Destroy;
begin
    inherited;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TPiCategory.Create;
begin
    inherited;

    F_Id                := '';
    F_CategoryName      := '';
    F_Order             := '';

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TPiCategory.Destroy;
begin
    inherited;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TProgramIndexList.Create;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TProgramIndexList.Destroy;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TProgramIndexList.GetData( index : integer ) : TProgramIndex;
begin
    Result := nil;

    if (index < 0) or (Count <= index) then Exit;

    Result := TProgramIndex( Items[ index ] );
end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TPiCategoryList.Create;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TPiCategoryList.Destroy;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TPiCategoryList.GetData( index : integer ) : TPiCategory;
begin
    Result := nil;

    if (index < 0) or (Count <= index) then Exit;

    Result := TPiCategory( Items[ index ] );
end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TProgramIndexDb.Create;
var
    i : integer;

begin
    inherited;

    FProgramList    := TProgramIndexList.Create;

    for i:=0 to HIGH( FPiCategoryList ) do begin
        FPiCategoryList[i] := TPiCategoryList.Create;
    end;

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TProgramIndexDb.Destroy;
begin
    inherited;

end;

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function TProgramIndexDb.GetPiCategoryList( cate : integer ) : TPiCategoryList;
begin
    Result := FPiCategoryList[ cate ];
end;

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
const
    FProgIndexDbTable : array [0..3] of string = (
        'Program',
        'PiCategory',
        'PiCategory2',
        'PiCategory3'
    );

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TProgramIndexDb.Load( fn : string ) : Boolean;
var
    xml : IXMLDocument;
   	cnl, cnl0 : IXMLNodeList;
    j, n : integer;
	a : string;
//    count : array [0..15] of integer;


begin
    Result := False;

    // ファイルなし
    if False = FileExists( fn ) then Exit;

    // XML読み込み
    xml	:= LoadXMLDocument( fn );

    // 'ProgramIndexDb'
    cnl0	:= xml.DocumentElement.ChildNodes;

    for j:=0 to cnl0.Count-1 do begin

        a    := cnl0.Nodes[j].NodeName;

        n := AnsiIndexStr( a, FProgIndexDbTable );
        if n = -1 then begin
//            Inc( count[ 1 ] );
            beep;
            continue;
        end;

//        Inc( count[ n ] );

        cnl		:= cnl0.Nodes[j].ChildNodes;

        case n of
        0:  ProgramIndexLoad( cnl );
        1..3:
            PiCategoryLoad( cnl, n-1 );
        end;

    end;

{
    m := 0;
    for j:=0 to HIGH( count ) do begin
        m := m + count[j];
    end;
}
    Result := False;
end;

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
const
    tbl_30  : array [0..13] of string = (
        'F_Id',
        'F_CategoryName',
        'F_CategoryName2',
        'F_CategoryName3',
        'F_ProgramName',
        'F_IsLocked',
        'F_CreatedDateTime',
        'F_UpdatedDateTime',
        'F_CategoryOrder',
        'F_CategoryOrder2',
        'F_CategoryOrder3',
        'F_ProgramMemo',
        'F_ProgramOrder',

        'F_SystemMode'

    );

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
procedure TProgramIndexDb.ProgramIndexLoad( cnl : IXMLNodeList );
var
    j : integer;
    str, txt : string;
    u : TProgramIndex;

begin

    u := TProgramIndex.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        case AnsiIndexStr( str, tbl_30 ) of
        0:  u.F_Id                  := txt;
        1:  u.F_CategoryName        := txt;
        2:  u.F_CategoryName2       := txt;
        3:  u.F_CategoryName3       := txt;
        4:  u.F_ProgramName         := txt;
        5:  u.F_IsLocked            := txt;
        6:  u.F_CreatedDateTime     := txt;
        7:  u.F_UpdatedDateTime     := txt;
        8:  u.F_CategoryOrder       := txt;
        9:  u.F_CategoryOrder2      := txt;
        10: u.F_CategoryOrder3      := txt;
        11: u.F_ProgramMemo         := txt;
        12: u.F_ProgramOrder        := txt;
        13: u.F_SystemMode          := txt;
        else
            begin
                beep;
            end;
        end;
    end;

    FProgramList.Add( u );
end;


//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
const
    tbl_31  : array [0..2] of string = (
        'F_Id',
        'F_CategoryName',
        'F_Order'
    );

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
procedure TProgramIndexDb.PiCategoryLoad( cnl : IXMLNodeList; cate : integer );
var
    j : integer;
    str, txt : string;
    u : TPiCategory;

begin

    u := TPiCategory.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        case AnsiIndexStr( str, tbl_31 ) of
        0:  u.F_Id                  := txt;
        1:  u.F_CategoryName        := txt;
        2:  u.F_Order               := txt;
        else
            begin
                beep;
            end;
        end;
    end;

    FPiCategoryList[cate].Add( u );
end;


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TAcTerminal.Create;
begin
    inherited;

    F_Id                                := '';
    F_Name                              := '';
    F_IpAddress                         := '';
    F_IsSaveButtonEnabled               := '';
    F_IsDefaultProgramLockButtonEnabled := '';
    F_IsRecBusNameEditable              := '';
    F_PermissionId                      := '';
    F_UnDeletable                       := '';
    F_IsServer                          := '';
    F_IsImExEnabled                     := '';
    F_IsLocked                          := '';
    F_IsOffLineTerminal                 := '';

    F_IsAllGroupEnabled                 := '';
    F_OnLineButtonEnabled               := '';
    F_IsPanelPageNameEditEnabled        := '';

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TAcTerminal.Destroy;
begin
    inherited;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TAcTerminalList.Create;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TAcTerminalList.Destroy;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TAcTerminalList.GetData( index : integer ) : TAcTerminal;
begin
    Result := nil;

    if (index < 0) or (Count <= index) then Exit;

    Result := TAcTerminal( Items[ index ] );
end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
procedure TAcTerminalList.ClearAll;
var
    dt : TAcTerminal;

begin
    while True do begin
        dt := Data[0];
        if nil = dt then break;

        Extract( dt );
        dt.Free;
    end;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TAcPermission.Create;
begin
    inherited;

    F_Id                                := '';
    F_Name                              := '';
    F_Description                       := '';
    F_IsRejectFilter                    := '';

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TAcPermission.Destroy;
begin
    inherited;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TAcPermissionList.Create;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TAcPermissionList.Destroy;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TAcPermissionList.GetData( index : integer ) : TAcPermission;
begin
    Result := nil;

    if (index < 0) or (Count <= index) then Exit;

    Result := TAcPermission( Items[ index ] );
end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
procedure TAcPermissionList.ClearAll;
var
    dt : TAcPermission;

begin
    while True do begin
        dt := Data[0];
        if nil = dt then break;

        Extract( dt );
        dt.Free;
    end;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TAcFilter.Create;
begin
    inherited;

    F_Id                                := '';
    F_PermissionId                      := '';
    F_TargetTypeName                    := '';
    F_TargetInstanceId                  := '';
    F_Enabled                           := '';

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TAcFilter.Destroy;
begin
    inherited;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TAcFilterList.Create;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TAcFilterList.Destroy;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TAcFilterList.GetData( index : integer ) : TAcFilter;
begin
    Result := nil;

    if (index < 0) or (Count <= index) then Exit;

    Result := TAcFilter( Items[ index ] );
end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
procedure TAcFilterList.ClearAll;
var
    dt : TAcFilter;

begin
    while True do begin
        dt := Data[0];
        if nil = dt then break;

        Extract( dt );
        dt.Free;
    end;

end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TAccountDb.Create;
begin
    inherited;

    FAcTerminalList     := TAcTerminalList.Create;
    FAcPermissionList   := TAcPermissionList.Create;
    FAcFilterList       := TAcFilterList.Create;

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TAccountDb.Destroy;
begin

    FAcTerminalList.ClearAll;
    FAcTerminalList.Free;

    FAcPermissionList.ClearAll;
    FAcPermissionList.Free;

    FAcFilterList.ClearAll;
    FAcFilterList.Free;

    inherited;
end;

const
    FAccountDbTable : array [0..2] of string = (
        'AcTerminal',
        'AcPermission',
        'AcFilter'
    );

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TAccountDb.Load( fn : string ) : Boolean;
var
    xml : IXMLDocument;
   	cnl, cnl0 : IXMLNodeList;
    j, n : integer;
	a : string;
//    count : array [0..15] of integer;


begin
    Result := False;

    // ファイルなし
    if False = FileExists( fn ) then Exit;

    // XML読み込み
    xml	:= LoadXMLDocument( fn );

    // 'ProgramIndexDb'
    cnl0	:= xml.DocumentElement.ChildNodes;

    for j:=0 to cnl0.Count-1 do begin

        a    := cnl0.Nodes[j].NodeName;

        n := AnsiIndexStr( a, FAccountDbTable );
        if n = -1 then begin
//            Inc( count[ 1 ] );
            beep;
            continue;
        end;

//        Inc( count[ n ] );

        cnl		:= cnl0.Nodes[j].ChildNodes;

        case n of
        0:  AcTerminalload( cnl );
        1:  AcPermissionLoad( cnl );
        2:  AcFilterLoad( cnl );
        end;

    end;

{
    m := 0;
    for j:=0 to HIGH( count ) do begin
        m := m + count[j];
    end;
}
    Result := False;
end;


//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
const
    tbl_40  : array [0..14] of string = (
        'F_Id',
        'F_Name',
        'F_IpAddress',
        'F_IsSaveButtonEnabled',
        'F_IsDefaultProgramLockButtonEnabled',
        'F_IsRecBusNameEditable',
        'F_PermissionId',
        'F_UnDeletable',
        'F_IsServer',
        'F_IsImExEnabled',
        'F_IsLocked',
        'F_IsOffLineTerminal',

        'F_IsAllGroupEnabled',
        'F_OnLineButtonEnabled',
        'F_IsPanelPageNameEditEnabled'
    );

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
procedure TAccountDb.AcTerminalload( cnl : IXMLNodeList );
var
    j : integer;
    str, txt : string;
    u : TAcTerminal;

begin

    u := TAcTerminal.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        case AnsiIndexStr( str, tbl_40 ) of
        0:  u.F_Id                                  := txt;
        1:  u.F_Name                                := txt;
        2:  u.F_IpAddress                           := txt;
        3:  u.F_IsSaveButtonEnabled                 := txt;
        4:  u.F_IsDefaultProgramLockButtonEnabled   := txt;
        5:  u.F_IsRecBusNameEditable                := txt;
        6:  u.F_PermissionId                        := txt;
        7:  u.F_UnDeletable                         := txt;
        8:  u.F_IsServer                            := txt;
        9:  u.F_IsImExEnabled                       := txt;
        10: u.F_IsLocked                            := txt;
        11: u.F_IsOffLineTerminal                   := txt;

        12: u.F_IsAllGroupEnabled                   := txt;
        13: u.F_OnLineButtonEnabled                 := txt;
        14: u.F_IsPanelPageNameEditEnabled          := txt;

        else
            begin
                beep;
            end;
        end;
    end;

    FAcTerminalList.Add( u );
end;

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
const
    tbl_41  : array [0..3] of string = (
        'F_Id',
        'F_Name',
        'F_Description',
        'F_IsRejectFilter'
    );

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
procedure TAccountDb.AcPermissionLoad( cnl : IXMLNodeList );
var
    j : integer;
    str, txt : string;
    u : TAcPermission;

begin

    u := TAcPermission.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        case AnsiIndexStr( str, tbl_41 ) of
        0:  u.F_Id              := txt;
        1:  u.F_Name            := txt;
        2:  u.F_Description     := txt;
        3:  u.F_IsRejectFilter  := txt;
        else
            begin
                beep;
            end;
        end;
    end;

    FAcPermissionList.Add( u );
end;

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
const
    tbl_42  : array [0..4] of string = (
        'F_Id',
        'F_PermissionId',
        'F_TargetTypeName',
        'F_TargetInstanceId',
        'F_Enabled'
    );

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
procedure TAccountDb.AcFilterLoad( cnl : IXMLNodeList );
var
    j : integer;
    str, txt : string;
    u : TAcFilter;

begin

    u := TAcFilter.Create;

    for j:=0 to cnl.Count-1 do begin

        str	:= cnl.Nodes[j].NodeName;
        txt	:= cnl.Nodes[j].Text;

        case AnsiIndexStr( str, tbl_42 ) of
        0:  u.F_Id                  := txt;
        1:  u.F_PermissionId        := txt;
        2:  u.F_TargetTypeName      := txt;
        3:  u.F_TargetInstanceId    := txt;
        4:  u.F_Enabled             := txt;
        else
            begin
                beep;
            end;
        end;
    end;

    FAcFilterList.Add( u );
end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TLayoutData.Create;
begin
    inherited;

    FFrame      := nil;
    FList       := nil;

    FChild[0]   := nil;
    FChild[1]   := nil;

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TLayoutData.Destroy;
begin

    if nil <> FFrame then
        FFrame.Free;

    if nil <> FList then begin
        FList.ClearAll;
        FList.Free;
    end;

    FChild[0].Free;
    FChild[1].Free;

    inherited;
end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TLayoutData.IsEmpty : Boolean;
begin
    Result := (nil = FFrame) or (nil = FList);
end;

function TLayoutData.GetChild( index : integer ) : TLayoutList;
begin
    Result := FChild[ index ];
end;

procedure TLayoutData.SetChild( index : integer; ly : TLayoutList );
begin
    FChild[ index ] := ly;
end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-----------------------------------------------------------------------------
//  コンストラクタ
//-----------------------------------------------------------------------------
constructor TLayoutList.Create;
begin
    inherited;

end;

//-----------------------------------------------------------------------------
//  デストラクタ
//-----------------------------------------------------------------------------
destructor TLayoutList.Destroy;
begin


    inherited;
end;


end.





(*
const
    FXPTSourceTable : array [0..7] of string = (
        'PgSettings',
        'PgXpt',
        'PgDevice',
        'PgBkupData',
        'PgDstName',

        'PgSrcName',

        'PgSrcKeyColor',
        'PgPanelKey'
    );

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TXPTSourceList.Load( fn : string ) : Boolean;
var
    xml : IXMLDocument;
   	cnl, cnl0 : IXMLNodeList;
    j, n : integer;
	a : string;
    count : array [0..15] of integer;

    s : TXPTSourceData;
    st : TPgSettingData;


begin
    Result := False;

    // ファイルなし
    if False = FileExists( fn ) then Exit;

    // XML読み込み
    xml	:= LoadXMLDocument( fn );

    // 'ProgramDb'
    cnl0	:= xml.DocumentElement.ChildNodes;

    for j:=0 to cnl0.Count-1 do begin

        a    := cnl0.Nodes[j].NodeName;

        n := AnsiIndexStr( a, FXPTSourceTable );
        if n = -1 then begin
//            beep;

//            Inc( count[ 1 ] );

            continue;
        end;

        Inc( count[ n ] );

        cnl		:= cnl0.Nodes[j].ChildNodes;

        case n of
        0:  st  := PgSettingLoad( cnl );

        5:  s   := XPTSourceLoad( cnl );

        else
            s := nil;
        end;

        if s <> nil then begin
            Add( s );
        end;

    end;

{
    m := 0;
    for j:=0 to HIGH( count ) do begin
        m := m + count[j];
    end;
}
    Result := False;
end;
*)




(*
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TProgramDbList.GetData( index : integer ) : TProgramDb;
begin
    Result := nil;

    if (index < 0) or (Count <= index) then Exit;

    Result := TProgramDb( Items[ index ] );
end;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
procedure TProgramDbList.ClearAll;
var
    dt : TProgramDb;

begin
    while True do begin
        dt := Data[0];
        if dt = nil then break;

        Extract( dt );
        dt.Free;
    end;

end;

const
    FProgramDbTable : array [0..7] of string = (
        'PgSettings',
        'PgXpt',
        'PgDevice',
        'PgBkupData',
        'PgDstName',

        'PgSrcName',

        'PgSrcKeyColor',
        'PgPanelKey'
    );

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function TProgramDbList.Load( fn : string ) : Boolean;
var
    xml : IXMLDocument;
   	cnl, cnl0 : IXMLNodeList;
    j, n : integer;
	a : string;
    count : array [0..15] of integer;

    s : TXPTSourceData;

begin
    Result := False;

    // ファイルなし
    if False = FileExists( fn ) then Exit;

    // XML読み込み
    xml	:= LoadXMLDocument( fn );

    // 'ProgramDb'
    cnl0	:= xml.DocumentElement.ChildNodes;

    for j:=0 to cnl0.Count-1 do begin

        a    := cnl0.Nodes[j].NodeName;

        n := AnsiIndexStr( a, FXPTSourceTable );
        if n = -1 then begin
            beep;

            continue;
        end;

        Inc( count[ n ] );

        cnl		:= cnl0.Nodes[j].ChildNodes;

        case n of
        0:  s := ProgramDbLoad( cnl );
        1:  s := DisplayEmptyTypeLoad( cnl );
        2:  s := DisplayDisplayEmptyValueLoad( cnl );
        3:  s := DisplayDspSettingsLoad( cnl );
        else
            s := nil;
        end;

        if s <> nil then begin
            Add( s );
        end;

    end;

{
    m := 0;
    for j:=0 to HIGH( count ) do begin
        m := m + count[j];
    end;
}
    Result := False;
end;
*)

